import os
import time
import random
import threading
from datetime import datetime, timedelta
from typing import Dict, Tuple, Optional

from flask import Flask
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, User, Poll
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes,
    PollHandler
)

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

NICK_COOLDOWN = timedelta(hours=1)  # –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∞–º–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ üî•\n\n"
    "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é, –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞—á–∏–≤–∫–∏."
)

HELP_TEXT = (
    "üõ† –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç (v1 + –Ω–∏–∫–∏):\n"
    "‚Ä¢ /start ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
    "‚Ä¢ /nick ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫ —Å–µ–±–µ\n"
    "‚Ä¢ /nick @user –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫ –¥—Ä—É–≥—É\n"
    "‚Ä¢ –ï—Å–ª–∏ —Ü–µ–ª—å ‚Äî –∞–¥–º–∏–Ω: –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (2 –º–∏–Ω—É—Ç—ã)\n"
    "‚Ä¢ –õ–∏–º–∏—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞: 1 —Ä–∞–∑ –≤ —á–∞—Å, –∞–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä—ã\n\n"
    "–î–∞–ª—å—à–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é, 8ball, —Ç—Ä–∏–≥–≥–µ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞—á–∏–≤–∫–∏."
)

STATS_PLACEHOLDER = (
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "‚Ä¢ –¢–æ–ø —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –º–æ–∂–µ–º —É–∂–µ —Å–µ–π—á–∞—Å (–≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ)\n"
    "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è/—Å–∏–º–≤–æ–ª—ã: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –ê—á–∏–≤–∫–∏: —Å–∫–æ—Ä–æ\n\n"
    "–ü—Ä–æ–∫–∞—á–∞–µ–º —ç—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö üòâ"
)

ACHIEVEMENTS_PLACEHOLDER = (
    "üèÖ –°–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "–ú–∞—Ç—ë—Ä—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòà\n"
    "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è."
)

# ========= –ö–ù–û–ü–ö–ò =========
BTN_HELP = "help_info"
BTN_STATS = "stats_open"
BTN_ACH = "ach_list"

def main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üß∞ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", callback_data=BTN_HELP)],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=BTN_STATS),
            InlineKeyboardButton("üèÖ –ê—á–∏–≤–∫–∏", callback_data=BTN_ACH),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

# ========= –ü–ê–ú–Ø–¢–¨ (–Ω–∞ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –ø—Ä–æ—Ü–µ—Å—Å–∞) =========
# –Ω–∏–∫–∏: chat_id -> { user_id: "–Ω–∏–∫" }
NICKS: Dict[int, Dict[int, str]] = {}
# –∑–∞–Ω—è—Ç—ã–µ –Ω–∏–∫–∏ –≤ —á–∞—Ç–µ: chat_id -> set(nick)
TAKEN_NICKS: Dict[int, set] = {}
# –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º: initiator_user_id -> datetime
LAST_NICK_ACTION: Dict[int, datetime] = {}
# –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ username (—á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ /nick @username): username_lower -> user_id
KNOWN_USERS: Dict[str, int] = {}
# –∞–∫—Ç–∏–≤–Ω—ã–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –∑–∞ –Ω–∏–∫ –∞–¥–º–∏–Ω–∞: poll_id -> (chat_id, target_user_id, target_username, pending_nick)
ADMIN_NICK_POLLS: Dict[str, Tuple[int, int, str, str]] = {}

# ========= –°–õ–û–í–ê–†–ò –î–õ–Ø –ù–ò–ö–û–í =========
ADJ = [
    "—à–∞–ª—å–Ω–æ–π","—Ö—Ä—É—Å—Ç—è—â–∏–π","–ª—ã—Å—ã–π","–±—É—Ä–ª—è—â–∏–π","–ª–∞–º–ø–æ–≤—ã–π","–∫–æ–≤–∞—Ä–Ω—ã–π","–±–∞—Ä—Ö–∞—Ç–Ω—ã–π","–¥–µ—Ä–∑–∫–∏–π","–º—è–≥–∫–æ—Ç–µ–ª—ã–π",
    "—Å—Ç–∞–ª—å–Ω–æ–π","—Å–æ–Ω–Ω—ã–π","–±—Ä–∞–≤—ã–π","—Ö–∏—Ç—Ä—ã–π","–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π","—Å–æ–ª—ë–Ω—ã–π","–¥—ã–º–Ω—ã–π","–ø—Ä—è–Ω—ã–π","–±–æ–¥—Ä—ã–π","—Ç—ë–ø–ª—ã–π",
    "–≥—Ä–æ–∑–Ω—ã–π","–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π","–±–∞—Ä—Å–∫–∏–π","–≤–µ—Å—ë–ª—ã–π","—Ä–∞–Ω–¥–æ–º–Ω—ã–π","–≤–µ–ª–∏–∫–æ—Å–≤–µ—Ç—Å–∫–∏–π"
]
NOUN = [
    "—ë–∂","–∫—Ä–∞–±","–±–∞—Ä—Å—É–∫","–∂–∏—Ä–∞—Ñ","–∫–∞—Ä–∞—Å—å","–±–∞—Ä–æ–Ω","–ø–∏—Ä–∞—Ç","—Å–∞–º—É—Ä–∞–π","—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç","–∫–ª–æ—É–Ω","–≤–æ–ª–∫","–∫–æ—Ç",
    "–∫–∞–±–∞–Ω","–º–µ–¥–≤–µ–¥—å","—Å–æ–≤–∞","–¥—Ä–∞–∫–æ–Ω–¥–æ–Ω","–≥—É—Å—å","–∫–æ–∑—ã—Ä—å","–¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","—à–∞–º–∞–Ω","–∫–∏–±–æ—Ä–≥","–∞—Ä–±—É–∑","–∫–æ–ª–æ–±–æ–∫",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä","—á–µ—Ä–≤—è–∫"
]
TAILS = [
    "–∏–∑ –ø–æ–¥—ä–µ–∑–¥–∞ ‚Ññ3","—Å –ø—Ä–∏–≤–µ—Ç–æ–º","–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö","XL","–≤ —Ç–∞–ø–∫–∞—Ö","–∏–∑ –±—É–¥—É—â–µ–≥–æ","–ø—Ä–∏ –±–∞–±–æ—á–∫–µ","deluxe",
    "edition 2.0","–±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤","–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ","—Å –æ–≥–æ–Ω—å–∫–æ–º","–≤ –æ—Ç—Å—Ç–∞–≤–∫–µ","–Ω–∞ –±–æ–±–∏–Ω–µ","turbo","‚Ñ¢Ô∏è",
    "prime","–Ω–∞ —Ä–∞–π–æ–Ω–µ","—Å —Å—é—Ä–ø—Ä–∏–∑–æ–º","VIP"
]
EMOJIS = ["ü¶î","ü¶Ä","ü¶ä","üêª","üê∫","üêó","üê±","ü¶â","üêü","ü¶Ü","ü¶Ñ","üê≤","ü•í","üçâ","üßÄ","üçî","üç∫","‚òïÔ∏è","üî•","üí£","‚ú®","üõ†Ô∏è","üëë","üõ∏"]

# ¬´–ø–µ—Ä—á–∏–Ω–∫–∞¬ª, —É–º–µ—Ä–µ–Ω–Ω–æ —Ç–æ–∫—Å–∏—á–Ω–æ, –ø–æ–¥–º–µ—à–∏–≤–∞–µ–º —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é ~25%
SPICY = [
    "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø","—Ö–∏—Ç—Ä–æ–∂–æ–ø","–∑–∞–¥–æ—Ä–Ω—ã–π –±—É–∑–æ—Ç—ë—Ä","–ø–æ—Ä–æ—á–Ω—ã–π –¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","–¥–≤–æ—Ä–æ–≤—ã–π –∫–Ω—è–∑—å",
    "–±–∞—Ä–æ–Ω —Å –ø–æ–Ω—Ç–∞–º–∏","—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç","—Å–∞–º—É—Ä–∞–π-–Ω–µ–¥–æ—É—á–∫–∞","–∫–∏–±–æ—Ä–≥ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Ö",
    "–ø–∏—Ä–∞—Ç –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏","–∫–ª–æ—É–Ω-–ø–æ—Ñ–∏–≥–∏—Å—Ç","–±–∞—Ä—Å—É–∫-–±—Ä–æ–¥—è–≥–∞"
]

def _user_key(u: User) -> str:
    return f"@{u.username}" if u.username else (u.full_name or f"id{u.id}")

async def _is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator","creator","owner")
    except Exception:
        return False

def _cooldown_ok(initiator_id: int) -> Optional[str]:
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç 1/—á–∞—Å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –≤—Å—ë –æ–∫, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ–∂–∏–¥–∞–Ω–∏—è."""
    now = datetime.utcnow()
    last = LAST_NICK_ACTION.get(initiator_id)
    if last and now - last < NICK_COOLDOWN:
        left = (last + NICK_COOLDOWN) - now
        mins = int(left.total_seconds() // 60) + 1
        return f"–ø–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{mins} –º–∏–Ω."
    return None

def _mark_cooldown(initiator_id: int):
    LAST_NICK_ACTION[initiator_id] = datetime.utcnow()

def _ensure_chat_maps(chat_id: int):
    if chat_id not in NICKS:
        NICKS[chat_id] = {}
    if chat_id not in TAKEN_NICKS:
        TAKEN_NICKS[chat_id] = set()

def _make_nick(chat_id: int, prev: Optional[str]) -> str:
    """–°–æ–±–∏—Ä–∞–µ–º –Ω–∏–∫ –∏–∑ —á–∞—Å—Ç–µ–π, –∏–∑–±–µ–≥–∞–µ–º –ø—Ä—è–º–æ–≥–æ –ø–æ–≤—Ç–æ—Ä–∞ prev –∏ —Å—Ç–∞—Ä–∞–µ–º—Å—è –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –≤ —á–∞—Ç–µ."""
    _ensure_chat_maps(chat_id)
    taken = TAKEN_NICKS[chat_id]

    for _ in range(50):  # –¥–æ 50 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∞–π—Ç–∏ –Ω–µ –∑–∞–Ω—è—Ç—ã–π –∏ –Ω–µ —Ä–∞–≤–Ω—ã–π prev
        parts = []
        # ~25% —à–∞–Ω—Å –ø–æ–¥–º–µ—à–∞—Ç—å ¬´–ø–µ—Ä—á–∏–Ω–∫—É¬ª –≤–º–µ—Å—Ç–æ –ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ
        if random.random() < 0.25:
            parts.append(random.choice(SPICY))
        else:
            parts.append(random.choice(ADJ))
        parts.append(random.choice(NOUN))
        if random.random() < 0.85:
            parts.append(random.choice(TAILS))
        nick = " ".join(parts)
        if random.random() < 0.7:
            nick += " " + random.choice(EMOJIS)

        if prev and nick == prev:
            continue
        if nick in taken:
            continue
        return nick

    # –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
    return f"{random.choice(ADJ)} {random.choice(NOUN)} {random.choice(TAILS)}"

def _set_nick(chat_id: int, user_id: int, nick: str):
    _ensure_chat_maps(chat_id)
    # –æ—Å–≤–æ–±–æ–¥–∏–º –ø—Ä–µ–∂–Ω–∏–π –Ω–∏–∫ –∏–∑ –∑–∞–Ω—è—Ç—ã—Ö
    prev = NICKS[chat_id].get(user_id)
    if prev and prev in TAKEN_NICKS[chat_id]:
        TAKEN_NICKS[chat_id].discard(prev)
    # —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π
    NICKS[chat_id][user_id] = nick
    TAKEN_NICKS[chat_id].add(nick)

def _resolve_target_user(update: Update) -> Optional[User]:
    """–¶–µ–ª—å –ø–æ reply –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ ‚Äî —Å–∞–º—ã–π –Ω–∞–¥—ë–∂–Ω—ã–π —Å–ø–æ—Å–æ–±."""
    if update.message and update.message.reply_to_message:
        return update.message.reply_to_message.from_user
    return None

def _resolve_target_by_arg(context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    """–ü–æ–ø—ã—Ç–∫–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ @username –Ω–∞–π—Ç–∏ user_id –ø–æ —Å–ª–æ–≤–∞—Ä—é KNOWN_USERS."""
    if not context.args:
        return None
    arg = context.args[0]
    if arg.startswith("@"):
        uid = KNOWN_USERS.get(arg[1:].lower())
        return uid
    return None

async def _update_known_user(user: User):
    if user and user.username:
        KNOWN_USERS[user.username.lower()] = user.id

# ========= –ö–û–ú–ê–ù–î–´ –ò –ö–ù–û–ü–ö–ò =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await _update_known_user(update.effective_user)
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    data = q.data
    if data == BTN_HELP:
        await q.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())
    elif data == BTN_STATS:
        # –ø–æ–∑–∂–µ —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤–∏–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await q.message.reply_text(STATS_PLACEHOLDER, reply_markup=main_keyboard())
    elif data == BTN_ACH:
        await q.message.reply_text(ACHIEVEMENTS_PLACEHOLDER, reply_markup=main_keyboard())
    else:
        await q.message.reply_text("¬Ø\\_(„ÉÑ)_/¬Ø –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=main_keyboard())

# ---- /nick ----
async def cmd_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    await _update_known_user(update.effective_user)

    chat_id = update.effective_chat.id
    initiator = update.effective_user

    # –ª–∏–º–∏—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    cd = _cooldown_ok(initiator.id)
    if cd:
        await update.message.reply_text(f"–ü–æ—Ç–µ—Ä–ø–∏, {cd}")
        return

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª—å
    target_user: Optional[User] = _resolve_target_user(update)
    target_id: Optional[int] = None
    target_username = None

    if target_user:
        target_id = target_user.id
        target_username = _user_key(target_user)
        await _update_known_user(target_user)
    else:
        # –ø–æ–ø—ã—Ç–∫–∞ –ø–æ –∞—Ä–≥—É–º–µ–Ω—Ç—É @username
        by_arg_id = _resolve_target_by_arg(context)
        if by_arg_id:
            target_id = by_arg_id
            # username –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            for uname, uid in KNOWN_USERS.items():
                if uid == by_arg_id:
                    target_username = f"@{uname}"
                    break

    # –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚Äî —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–∞–º —Å–µ–±–µ
    if target_id is None:
        target_id = initiator.id
        target_username = _user_key(initiator)

    # –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–ª—å ‚Äî –∞–¥–º–∏–Ω –∏ —ç—Ç–æ –Ω–µ —Å–∞–º —Å–µ–±–µ
    is_target_admin = await _is_admin(chat_id, target_id, context)
    if is_target_admin and target_id != initiator.id:
        _ensure_chat_maps(chat_id)
        prev = NICKS[chat_id].get(target_id)
        new_nick = _make_nick(chat_id, prev)

        poll_msg = await update.message.reply_poll(
    question=f"–ú–µ–Ω—è–µ–º –Ω–∏–∫ –∞–¥–º–∏–Ω—É {target_username} –Ω–∞ ¬´{new_nick}¬ª?",
    options=["–î–∞", "–ù–µ—Ç"],
    is_anonymous=False,
)
# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
ADMIN_NICK_POLLS[poll_msg.poll.id] = (chat_id, target_id, target_username, new_nick)

# –°—Ç–∞–≤–∏–º —Ç–∞–π–º–µ—Ä –Ω–∞ 120 —Å–µ–∫—É–Ω–¥: —Å–∞–º–∏ –∑–∞–∫—Ä–æ–µ–º –æ–ø—Ä–æ—Å –∏ –ø–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥–∏
context.job_queue.run_once(
    close_admin_poll_job,
    when=120,
    data={
        "poll_id": poll_msg.poll.id,
        "chat_id": chat_id,
        "message_id": poll_msg.message_id,
    },
    name=f"closepoll:{poll_msg.poll.id}",
)

_mark_cooldown(initiator.id)
return

    # –æ–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π: –ø—Ä–∏–º–µ–Ω—è–µ–º –Ω–∏–∫ —Å—Ä–∞–∑—É
    _ensure_chat_maps(chat_id)
    prev = NICKS[chat_id].get(target_id)
    new_nick = _make_nick(chat_id, prev)
    _set_nick(chat_id, target_id, new_nick)
    _mark_cooldown(initiator.id)

    if target_id == initiator.id:
        await update.message.reply_text(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫: ¬´{new_nick}¬ª")
    else:
        await update.message.reply_text(f"{target_username} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω(–∞) –∫–∞–∫ ¬´{new_nick}¬ª")

# ---- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π ----
async def on_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poll: Poll = update.poll
    if poll.id not in ADMIN_NICK_POLLS:
        return
    if not poll.is_closed:
        return

    chat_id, target_id, target_username, pending_nick = ADMIN_NICK_POLLS.pop(poll.id)
    # —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    yes_votes = 0
    no_votes = 0
    for opt in poll.options:
        if opt.text == "–î–∞":
            yes_votes = opt.voter_count
        elif opt.text == "–ù–µ—Ç":
            no_votes = opt.voter_count

    if yes_votes > no_votes:
        _ensure_chat_maps(chat_id)
        prev = NICKS[chat_id].get(target_id)
        if pending_nick != prev:
            _set_nick(chat_id, target_id, pending_nick)
        text = f"üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! {target_username} —Ç–µ–ø–µ—Ä—å ¬´{pending_nick}¬ª"
    else:
        text = f"‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –ù–∏–∫ {target_username} –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
    # –æ—Ç–ø—Ä–∞–≤–∏–º –≤ —á–∞—Ç
    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except Exception:
        pass

# ========= FLASK –¥–ª—è Render (healthcheck) =========
app = Flask(__name__)

@app.get("/")
def health():
    return "Bot is running!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# ========= ENTRY =========
def main():
    # –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    threading.Thread(target=run_flask, daemon=True).start()

    application = Application.builder().token(API_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("nick", cmd_nick))

    # –∫–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(on_button))

    # –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    application.add_handler(PollHandler(on_poll))

    application.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
