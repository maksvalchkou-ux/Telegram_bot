import os
import re
import random
import threading
from flask import Flask

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)

# –¢–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render (Environment ‚Üí BOT_TOKEN)
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ---------- –î–ê–ù–ù–´–ï ----------
answers = [
    "–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå", "–í–æ–∑–º–æ–∂–Ω–æ ü§î", "–õ—É—á—à–µ –Ω–µ –Ω–∞–¥–æ üòÖ",
    "–°—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ üíØ", "–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ ‚è≥", "–Ø –±—ã –Ω–µ —Ä–∏—Å–∫–æ–≤–∞–ª üö´"
]

nicknames = [
    "–°—ã—Ä–Ω—ã–π –ë–∞—Ä–æ–Ω üßÄ", "–ö–æ–ª–±–∞—Å–Ω—ã–π –õ–æ—Ä–¥ üå≠", "–ö–æ—Ç—è—Ä–∞ 3000 üê±",
    "–ú–∞–≥ –ü–æ–¥—Ç—è–∂–µ–∫ üßô", "–≠–ª—å—Ñ –õ–∞—Ä—å–∫–∞ üßù", "–û—Ä—ë–ª-–æ–±–æ—Å—Ä–∞–ª ü¶Ö"
]

reputation = {}  # –ø—Ä–æ—Å—Ç–∞—è –ø–∞–º—è—Ç—å –≤ RAM; –¥–ª—è 3 –¥—Ä—É–∑–µ–π –æ–∫

reactions = {
    "–ø–∏–≤–æ": "–ê –≥–¥–µ –º–æ—ë?! üç∫",
    "—Ä–∞–±–æ—Ç–∞": "–§—É, –Ω–µ –º–∞—Ç–µ—Ä–∏—Å—å! ü§¢",
    "—É—Ç—Ä–æ": "–£—Ç—Ä–æ –±—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±–µ–¥–∞. üåû"
}

# ---------- –•–≠–ù–î–õ–ï–†–´ ----------
async def cmd_8ball(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(answers))

async def cmd_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫: {random.choice(nicknames)}")

_plus_minus_re = re.compile(r"(?P<sign>\+1|-1)\s+(?P<user>@?\S+)")

async def plus_minus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text or ""
    m = _plus_minus_re.search(text)
    if not m:
        return
    user = m.group("user")
    delta = 1 if m.group("sign") == "+1" else -1
    reputation[user] = reputation.get(user, 0) + delta
    await update.message.reply_text(f"{user} —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç {reputation[user]} –æ—á–∫–æ–≤ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏!")

async def word_reactions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").lower()
    for word, reply in reactions.items():
        if word in text:
            await update.message.reply_text(reply)
            break

# ---------- FLASK –¥–ª—è Render (healthcheck) ----------
app = Flask(__name__)

@app.get("/")
def health():
    return "Bot is running!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# ---------- MAIN ----------
def main():
    # Flask ‚Äî –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ (Render –∂–¥—ë—Ç, —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Å–ª—É—à–∞–µ—Ç PORT)
    threading.Thread(target=run_flask, daemon=True).start()

    application = Application.builder().token(API_TOKEN).build()

    application.add_handler(CommandHandler("8ball", cmd_8ball))
    application.add_handler(CommandHandler("nick", cmd_nick))
    # +1 / -1
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(_plus_minus_re), plus_minus))
    # —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–ª–æ–≤–∞
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, word_reactions))

    application.run_polling(close_loop=False)

if __name__ == "__main__":
    main()
