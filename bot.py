import os
import re
import random
import threading
import html
import json
import asyncio
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, Set, Tuple, List

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User, InputFile
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from telegram.request import HTTPXRequest
import httpx

# ========= –ù–ê–°–¢–†–û–ô–ö–ò / ENV =========
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

GIST_TOKEN = os.getenv("GIST_TOKEN")
GIST_ID = os.getenv("GIST_ID")
GIST_FILENAME = os.getenv("GIST_FILENAME", "chat_state.json")

SELF_URL = os.getenv("SELF_URL")
OWNER_ID = int(os.getenv("OWNER_ID", "0"))  # Telegram user id –≤–ª–∞–¥–µ–ª—å—Ü–∞ (–¥–ª—è allowlist)

# –ö—É–ª–¥–∞—É–Ω—ã/–ª–∏–º–∏—Ç—ã
NICK_COOLDOWN = timedelta(hours=1)
TRIGGER_COOLDOWN = timedelta(seconds=20)
REP_DAILY_LIMIT = 10
REP_WINDOW = timedelta(hours=24)
UTC = timezone.utc

# –ü—Ä–æ—á–µ–µ
ADMINS_TTL_SEC = 600
LOCAL_BACKUP = "state_backup.json"

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –ª–∞–º–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ üî•\n\n"
    "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚Äî –ø–∞–º—è—Ç–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞."
)
HELP_TEXT = (
    "üõ† –ö–æ–º–∞–Ω–¥—ã (–∫–æ—Ä–æ—Ç–∫–æ):\n"
    "‚Ä¢ /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
    "‚Ä¢ /nick ‚Äî –Ω–∏–∫ —Å–µ–±–µ; /nick @user –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º ‚Äî –Ω–∏–∫ –¥—Ä—É–≥—É\n"
    "‚Ä¢ /8ball –≤–æ–ø—Ä–æ—Å ‚Äî –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –æ—Ç–≤–µ—á–∞–µ—Ç\n"
    "‚Ä¢ +1 / -1 ‚Äî —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ —Ä–µ–ø–ª–∞—é –∏–ª–∏ —Å @username\n"
    "‚Ä¢ ¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª ‚Äî —Ç–æ–ø-10 —Ä–µ–ø—ã, –Ω–∏–∫–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∞—á–∏–≤–∫–∏\n\n"
    "–î–ª—è –∞–¥–º–∏–Ω–æ–≤ ‚Äî –Ω–∞–±–µ—Ä–∏ /admin (–≤ –≥—Ä—É–ø–ø–µ) –∏–ª–∏ –≤ –õ–°: –±—É–¥–µ—Ç –º–µ–Ω—é."
)
ADMIN_MENU_TEXT = (
    "üîß –ú–µ–Ω—é –∞–¥–º–∏–Ω–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°):\n"
    "‚Ä¢ /triggers ‚Äî —Å–ø–∏—Å–æ–∫/—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏ —á–∞—Ç–∞\n"
    "‚Ä¢ /triggers_add ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä (–º–∞—Å—Ç–µ—Ä)\n"
    "‚Ä¢ /triggers_toggle <‚Ññ> ‚Äî –≤–∫–ª/–≤—ã–∫–ª –ø–æ –Ω–æ–º–µ—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞\n"
    "‚Ä¢ /triggers_del <‚Ññ> ‚Äî —É–¥–∞–ª–∏—Ç—å\n"
    "‚Ä¢ /resettriggers ‚Äî –≤–µ—Ä–Ω—É—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã\n"
    "‚Ä¢ /reset ‚Äî —Å–±—Ä–æ—Å–∏—Ç—å –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)\n"
    "‚Ä¢ /resetuser @user (–∏–ª–∏ –ø–æ —Ä–µ–ø–ª–∞—é –≤ –≥—Ä—É–ø–ø–µ)\n"
    "‚Ä¢ /export, /export_here, /import ‚Äî –±—ç–∫–∞–ø—ã\n"
    "‚Ä¢ /diag ‚Äî –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞\n\n"
    "–î–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞:\n"
    "‚Ä¢ /allowchat ‚Äî —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç\n"
    "‚Ä¢ /denychat ‚Äî –∑–∞–ø—Ä–µ—Ç–∏—Ç—å –∏ —Å—Ç–µ—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞\n"
    "‚Ä¢ /listchats ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤"
)
STATS_TITLE = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

# ========= –ö–ù–û–ü–ö–ò =========
BTN_HELP  = "help_info"
BTN_STATS = "stats_open"

def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß∞ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", callback_data=BTN_HELP)],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=BTN_STATS)],
    ])

# ========= –ü–ê–ú–Ø–¢–¨ (in-memory) =========
# Allowlist —á–∞—Ç–æ–≤: —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å –±–æ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç
ALLOW_CHATS: Set[int] = set()
CHAT_TITLES: Dict[int, str] = {}  # –∫—Ä–∞—Å–∏–≤–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–ø–∏—Å–∫–∞—Ö

# ‚Äî –Ω–∏–∫–∏
NICKS: Dict[int, Dict[int, str]] = {}
TAKEN: Dict[int, Set[str]] = {}
LAST_NICK: Dict[int, datetime] = {}

# ‚Äî –∏–∑–≤–µ—Å—Ç–Ω—ã–µ @username –∏ –∏–º–µ–Ω–∞
KNOWN: Dict[str, int] = {}  # username_lower -> user_id
NAMES: Dict[int, str] = {}  # user_id -> display (@username > full_name)

# ‚Äî —Ç—Ä–∏–≥–≥–µ—Ä—ã: –∫–æ–Ω—Ñ–∏–≥–∏—Ä—É–µ–º—ã–µ per-chat
class TriggerCfg(dict): ...
# TRIGGERS_CFG[chat_id] = List[ {id,name,pattern,is_regex,ignore_case,word_boundaries,answers:[...],enabled:bool} ]
TRIGGERS_CFG: Dict[int, List[TriggerCfg]] = {}

# ‚Äî —Å–ª—É–∂–µ–±–Ω–æ–µ: –∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ regex –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –º–∞—Ç—á–∏–Ω–≥–∞
TRIGGERS_COMPILED: Dict[int, List[Tuple[re.Pattern, List[str], str, bool]]] = {}  # chat_id -> [(pattern, answers, name, enabled)]

# ‚Äî —Å–ø–∞–º/—Ç–∞–π–º–∏–Ω–≥–∏
LAST_TRIGGER_TIME: Dict[int, datetime] = {}

# ‚Äî —Ä–µ–ø—É—Ç–∞—Ü–∏—è/—Å—á—ë—Ç—á–∏–∫–∏ ‚Äî –ü–û –ß–ê–¢–ê–ú
REP_GIVEN: Dict[int, Dict[int, int]] = {}
REP_RECEIVED: Dict[int, Dict[int, int]] = {}
REP_POS_GIVEN: Dict[int, Dict[int, int]] = {}
REP_NEG_GIVEN: Dict[int, Dict[int, int]] = {}
REP_GIVE_TIMES: Dict[int, Dict[int, List[datetime]]] = {}

MSG_COUNT: Dict[int, Dict[int, int]] = {}
CHAR_COUNT: Dict[int, Dict[int, int]] = {}
NICK_CHANGE_COUNT: Dict[int, Dict[int, int]] = {}
EIGHTBALL_COUNT: Dict[int, Dict[int, int]] = {}
TRIGGER_HITS: Dict[int, Dict[int, int]] = {}
BEER_HITS: Dict[int, Dict[int, int]] = {}
LAST_MSG_AT: Dict[int, Dict[int, datetime]] = {}

ADMIN_PLUS_GIVEN: Dict[int, Dict[int, int]] = {}
ADMIN_MINUS_GIVEN: Dict[int, Dict[int, int]] = {}

ACHIEVEMENTS: Dict[int, Dict[int, Set[str]]] = {}

# ‚Äî –∫–µ—à –∞–¥–º–∏–Ω–æ–≤: chat_id -> (set(user_id), expires_ts)
ADMINS_CACHE: Dict[int, Tuple[Set[int], float]] = {}

# ‚Äî —Å–µ—Å—Å–∏–∏ –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –≤ –õ–° (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ –∏ —Ç.–ø.)
ADMIN_SESS: Dict[int, Dict[str, any]] = {}  # key: admin user_id

# ‚Äî –ª–æ–∫–∏
STATE_LOCK = asyncio.Lock()

# ========= –î–ï–§–û–õ–¢–ù–´–ï –¢–†–ò–ì–ì–ï–†–´ (–ú–ò–ì–†–ò–†–£–Æ–¢–°–Ø –í CFG –ü–†–ò –ù–£–ñ–î–ï) =========
DEFAULT_TRIGGERS: List[TriggerCfg] = [
    TriggerCfg({
        "id": "work",
        "name": "–†–∞–±–æ—Ç–∞",
        "pattern": r"\b—Ä–∞–±–æ—Ç(–∞|–∞—Ç—å|–∞—é|–∞–µ–º|–∞–µ—Ç|–∞–ª|–∞–ª–∏|–∞—Ç—å|—É|—ã|–µ|–æ–π)\b",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–†–∞–±–æ—Ç–∫–∞ –ø–æ–¥—ä–µ—Ö–∞–ª–∞? –î–µ—Ä–∂–∏—Å—å, —á–µ–º–ø–∏–æ–Ω üõ†Ô∏è",
                    "–û–ø—è—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å? –ó–∞–±–∏—Ä–∞–π +100 –∫ —Ç–µ—Ä–ø–µ–Ω–∏—é üí™",
                    "–¢—Ä—É–¥—è–≥–∞ –Ω–∞ —Å–≤—è–∑–∏. –ü–æ—Å–ª–µ ‚Äî –ø–∏–≤–∫–æ –∑–∞—Å–ª—É–∂–µ–Ω–æ üç∫"],
        "enabled": True
    }),
    TriggerCfg({
        "id": "beer",
        "name": "–ü–∏–≤–æ",
        "pattern": r"\b–ø–∏–≤(–æ|–æ—Å|–∫–æ|–∞–Ω–¥|–∞–Ω–¥–æ—Å)\b",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–ó–∞ —Ö–æ–ª–æ–¥–Ω–µ–Ω—å–∫–æ–µ! üçª","–ü–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ ‚Äî —Å–≤—è—Ç–æ–µ –¥–µ–ª–æ üç∫","–ü–∏–≤–∫–æ ‚Äî –∏ –≤—Å—ë –Ω–∞–ª–∞–¥–∏—Ç—Å—è üòå"],
        "enabled": True
    }),
    TriggerCfg({
        "id": "sleep",
        "name": "–°–æ–Ω",
        "pattern": r"\b—Å–ø–∞—Ç|—Å–æ–Ω|–∑–∞—Å—ã–ø|–¥—Ä—ã—Ö–Ω|–≤—ã—Å–ø(–∞|—ã)",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–ù–µ –∑–∞–±—É–¥—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–¥–∏–ª—å–Ω–∏–∫ ‚è∞","–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, –∫–æ—Ç–∏–∫–∏ üò¥","–î—Ä—ã—Ö–Ω—É—Ç—å ‚Äî —ç—Ç–æ —Ç–æ–∂–µ —Ö–æ–±–±–∏."],
        "enabled": True
    }),
    TriggerCfg({
        "id": "gym",
        "name": "–ó–∞–ª",
        "pattern": r"\b–∑–∞–ª\b|\b–∫–∞—á|—Ç—Ä–µ–Ω(–∏—Ä|–µ—Ä|–∏—Ä—É—é|–∏—Ä–æ–≤–∫–∞)",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–ñ–µ–ª–µ–∑–æ –Ω–µ –∂–¥—ë—Ç! üèãÔ∏è","–ë–∏—Ü–µ–ø—Å —Å–∞–º —Å–µ–±—è –Ω–µ –Ω–∞–∫–∞—á–∞–µ—Ç üí™","–ü–æ—Å–ª–µ –∑–∞–ª–∞ ‚Äî –ø—Ä–æ—Ç–µ–∏–Ω –∏ –º–µ–º–∞—Å—ã."],
        "enabled": True
    }),
    TriggerCfg({
        "id": "money",
        "name": "–î–µ–Ω—å–≥–∏",
        "pattern": r"\b–¥–µ–Ω—å–≥|–±–∞–±–∫|–∑–∞—Ä–ø–ª–∞—Ç|–∑–ø\b|\b–∫—ç—à\b",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–î–µ–Ω—å–≥–∏ ‚Äî –ø—ã–ª—å. –ù–æ –ø—Ä–∏—è—Ç–Ω–æ, –∫–æ–≥–¥–∞ –∏—Ö –º–Ω–æ–≥–æ üí∏","–ù–∞ —à–∞—É—Ä–º—É —Ö–≤–∞—Ç–∏—Ç ‚Äî –∂–∏–∑–Ω—å —É–¥–∞–ª–∞—Å—å üòé","–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ—Ç–æ–∫ —É–∂–µ –≤ –ø—É—Ç–∏ ü™Ñ"],
        "enabled": True
    }),
    TriggerCfg({
        "id": "hello",
        "name": "–ü—Ä–∏–≤–µ—Ç",
        "pattern": r"\b–ø—Ä–∏–≤(–µ—Ç|–µ–¥)|–∑–¥–æ—Ä–æ|–∑–¥—Ä–∞–≤—Å—Ç",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–ü—Ä–∏–≤–µ—Ç—É–ª–∏ üëã","–ó–¥–∞—Ä–æ–≤–∞, –ª–µ–≥–µ–Ω–¥—ã!","–ô–æ-–π–æ, —á–∞—Ç!"],
        "enabled": True
    }),
    TriggerCfg({
        "id": "bye",
        "name": "–ü–æ–∫–∞",
        "pattern": r"\b–ø–æ–∫(–∞|–µ–¥)|–¥–æ –≤—Å—Ç—Ä–µ—á|–±–±\b",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–ù–µ –ø—Ä–æ–ø–∞–¥–∞–π üëã","–î–æ —Å–≤—è–∑–∏!","–£—à—ë–ª –∫—Ä–∞—Å–∏–≤–æ üö™"],
        "enabled": True
    }),
    TriggerCfg({
        "id": "love",
        "name": "–õ—é–±–æ–≤—å",
        "pattern": r"\b–ª—é–±–ª(—é|—é–ª—é)|–∫—Ä–∞—à|—Å–µ—Ä–¥–µ—á–∫|—Ä–æ–º–∞–Ω—Ç–∏–∫",
        "is_regex": True,
        "ignore_case": True,
        "word_boundaries": False,
        "answers": ["–õ—é–±–æ–≤—å —Å–ø–∞—Å—ë—Ç –º–∏—Ä ‚ù§Ô∏è","–°–µ—Ä–¥–µ—á–∫–∏ –ø–æ–ª–µ—Ç–µ–ª–∏ üíò","–û—Å—Ç–æ—Ä–æ–∂–Ω–æ, –º–∏–ª–æ—Ç–∞ –≤—ã—à–µ –Ω–æ—Ä–º—ã ü´∂"],
        "enabled": True
    }),
]

# ========= –ê–ß–ò–í–ö–ò =========
ACH_LIST: Dict[str, Tuple[str, str]] = {
    "–ß–∏—Ç–µ—Ä —ë–±–∞–Ω—ã–π":         ("–ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å +1 —Å–∞–º–æ–º—É —Å–µ–±–µ",         "–°–∞–º —Å–µ–±–µ +1 ‚Äî –Ω–µ–ª—å–∑—è."),
    "–ù–∏–∫–æ—Ñ–∏–ª –µ–±—É—á–∏–π":       ("5 —Å–º–µ–Ω –Ω–∏–∫–Ω–µ–π–º–∞",                           "–°–º–µ–Ω–∏–ª –Ω–∏–∫ ‚â• 5 —Ä–∞–∑."),
    "–ù–∏–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä":     ("10 —Å–º–µ–Ω –Ω–∏–∫–Ω–µ–π–º–∞",                          "–°–º–µ–Ω–∏–ª –Ω–∏–∫ ‚â• 10 —Ä–∞–∑."),
    "–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü":      ("—Ä–∞–∑–¥–∞–ª +10 —Ä–µ–ø—É—Ç–∞—Ü–∏–π",                      "–í—ã–¥–∞–Ω–æ +1 ‚â• 10 —Ä–∞–∑."),
    "–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫":    ("—Ä–∞–∑–¥–∞–ª –ª—é–±—É—é —Ä–µ–ø—É 20 —Ä–∞–∑",                  "–õ—é–±—ã—Ö –≤—ã–¥–∞—á (¬±1) ‚â• 20."),
    "–õ—é–±–∏–º—á–∏–∫, —Å—É–∫–∞":       ("–ø–æ–ª—É—á–∏–ª +20 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",                     "–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–ø—ã ‚â• 20."),
    "–¢–æ–∫—Å–∏–∫-–º–∞–≥–Ω–∏—Ç":        ("—É—à—ë–ª –≤ –º–∏–Ω—É—Å –ø–æ —Ä–µ–ø–µ",                      "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø–∞ ‚â§ -10."),
    "–ü–∏–≤–Ω–æ–π —Å–æ–º–µ–ª—å–µ-–∞–ª–∫–∞—à": ("5 —Ä–∞–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∏–ª ¬´–ø–∏–≤–æ¬ª",                    "¬´–ü–∏–≤–æ¬ª-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚â• 5."),
    "–ü–∏–≤–æ–∑–∞–≤—Ä":             ("20 ¬´–ø–∏–≤–Ω—ã—Ö¬ª —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",                     "¬´–ü–∏–≤–æ¬ª-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚â• 20."),
    "–®–∞—Ä–æ–º–∞–Ω –¥–æ–ª–±–∞–Ω–Ω—ã–π":    ("/8ball –≤—ã–∑–≤–∞–Ω 10 —Ä–∞–∑",                      "–í—ã–∑–æ–≤–æ–≤ /8ball ‚â• 10."),
    "–ö–ª–∞–≤–æ–¥—Ä–æ–±–∏–ª–∫–∞":        ("–Ω–∞—Å—Ç—Ä–æ—á–∏–ª 5000 —Å–∏–º–≤–æ–ª–æ–≤",                   "–°–∏–º–≤–æ–ª–æ–≤ ‚â• 5000."),
    "–ü–∏—Å–∞—Ä—å-–º–∞—Ö–æ–≤–∏–∫":       ("–Ω–∞–∫–∏–¥–∞–ª 100 —Å–æ–æ–±—â–µ–Ω–∏–π",                     "–°–æ–æ–±—â–µ–Ω–∏–π ‚â• 100."),
    "–¢—Ä–∏–≥–≥–µ—Ä-–º–µ–π–∫–µ—Ä":       ("15 —Ä–∞–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∏–ª –±–æ—Ç–∞",                     "–õ—é–±—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚â• 15."),
    "–¢—Ä–æ–Ω–æ–ª–æ–º":             ("–º–µ–Ω—è–ª –Ω–∏–∫ –∞–¥–º–∏–Ω–∞",                          "–°–º–µ–Ω–∏–ª –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–∞–¥–º–∏–Ω—É."),
    "–ü–æ–¥—Ö–∞–ª–∏–º –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π":("–ø–æ—Å—Ç–∞–≤–∏–ª +1 –∞–¥–º–∏–Ω—É 5 —Ä–∞–∑",                  "–í—ã–¥–∞–ª +1 –∞–¥–º–∏–Ω–∞–º ‚â• 5."),
    "–£–∂–∞–ª–∏–ª –∫–æ—Ä–æ–ª—è":        ("–≤–ª–µ–ø–∏–ª -1 –∞–¥–º–∏–Ω–∞–º 3 —Ä–∞–∑–∞",                  "–í—ã–¥–∞–ª -1 –∞–¥–º–∏–Ω–∞–º ‚â• 3."),
    "–ö—Ä—É—Ç–æ–π —á–µ–ª":           ("–Ω–∞–∫–æ–ø–∏–ª —Å–æ–ª–∏–¥–Ω—É—é —Ä–µ–ø—É",                     "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø–∞ ‚â• 50."),
    "–û–ø—É—â–µ–Ω–Ω—ã–π":            ("–æ–ø—É—Å—Ç–∏–ª—Å—è –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–∏–∂–µ –ø–ª–∏–Ω—Ç—É—Å–∞",      "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø–∞ ‚â§ -20."),
    "–ü–æ—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ–≤": ("–ø—Ä–æ–ø–∞–¥–∞–ª 5 –¥–Ω–µ–π",                           "–ü–µ—Ä–µ—Ä—ã–≤ ‚â• 5 –¥–Ω–µ–π."),
    "–°–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ ***":     ("–ø—Ä–æ–ø–∞–¥–∞–ª 3 –¥–Ω—è",                            "–ü–µ—Ä–µ—Ä—ã–≤ ‚â• 3 –¥–Ω—è."),
    "–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç":       ("—à—É—Ç–∏—Ç –Ω–∏–∂–µ –ø–æ—è—Å–∞",                          "NSFW-—Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."),
    "–ö–æ—Ä–æ–ª—å —Ä–µ–ø—ã":          ("—Ä–µ–ø—É—Ç–∞—Ü–∏—è –∫–∞–∫ —É –±–æ–≥–∞",                      "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è ‚â• 100."),
    "–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫":     ("—Ä–∞–∑–¥–∞–ª -1 –¥–µ—Å—è—Ç—å —Ä–∞–∑",                      "–í—ã–¥–∞–Ω–æ -1 ‚â• 10."),
    "–§–ª—É–¥–µ—Ä–∞—Å—Ç":            ("—Å–ø–∞–º–∏–ª –∫–∞–∫ —à–∞–º–∞–Ω",                          "–°–æ–æ–±—â–µ–Ω–∏–π ‚â• 300."),
    "–°–ª–æ–≤–µ—Å–Ω—ã–π –ø–æ–Ω–æ—Å":      ("—Ä–∞–∑–ª–∏–ª –æ–∫–µ–∞–Ω —Ç–µ–∫—Å—Ç–∞",                       "–°–∏–º–≤–æ–ª–æ–≤ ‚â• 20000."),
    "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ—á–µ—Ä —à–∞—Ä–∞":("–ø–æ–¥—Å–µ–ª –Ω–∞ 8ball",                           "–í—ã–∑–æ–≤–æ–≤ /8ball ‚â• 30."),
}

# ========= –ú–ê–õ–´–ï –£–¢–ò–õ–ò–¢–´ =========
def _display_name(u: User) -> str:
    return f"@{u.username}" if u.username else (u.full_name or f"id{u.id}")

async def _remember_user(u: Optional[User]):
    if not u:
        return
    if u.username:
        KNOWN[u.username.lower()] = u.id
        NAMES[u.id] = f"@{u.username}"
    else:
        NAMES[u.id] = u.full_name or f"id{u.id}"

def _ensure_chat(chat_id: int):
    NICKS.setdefault(chat_id, {})
    TAKEN.setdefault(chat_id, set())
    REP_GIVEN.setdefault(chat_id, {})
    REP_RECEIVED.setdefault(chat_id, {})
    REP_POS_GIVEN.setdefault(chat_id, {})
    REP_NEG_GIVEN.setdefault(chat_id, {})
    REP_GIVE_TIMES.setdefault(chat_id, {})
    MSG_COUNT.setdefault(chat_id, {})
    CHAR_COUNT.setdefault(chat_id, {})
    NICK_CHANGE_COUNT.setdefault(chat_id, {})
    EIGHTBALL_COUNT.setdefault(chat_id, {})
    TRIGGER_HITS.setdefault(chat_id, {})
    BEER_HITS.setdefault(chat_id, {})
    LAST_MSG_AT.setdefault(chat_id, {})
    ADMIN_PLUS_GIVEN.setdefault(chat_id, {})
    ADMIN_MINUS_GIVEN.setdefault(chat_id, {})
    ACHIEVEMENTS.setdefault(chat_id, {})
    TRIGGERS_CFG.setdefault(chat_id, None)  # –º–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Ç–æ–º

def _cooldown_text(uid: int) -> Optional[str]:
    now = datetime.now(UTC)
    last = LAST_NICK.get(uid)
    if last and now - last < NICK_COOLDOWN:
        left = int((last + NICK_COOLDOWN - now).total_seconds())
        return f"–ø–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{left} —Å–µ–∫."
    return None

def _mark_nick(uid: int):
    LAST_NICK[uid] = datetime.now(UTC)

def _inc(d: Dict[int, int], key: int, by: int = 1):
    d[key] = d.get(key, 0) + by

def _name_or_id(uid: int) -> str:
    return NAMES.get(uid, f"id{uid}")

def _trigger_allowed(chat_id: int) -> bool:
    now = datetime.now(UTC)
    last = LAST_TRIGGER_TIME.get(chat_id)
    if last and now - last < TRIGGER_COOLDOWN:
        return False
    LAST_TRIGGER_TIME[chat_id] = now
    return True

def _achieve(chat_id: int, user_id: int, title: str) -> bool:
    got = ACHIEVEMENTS.setdefault(chat_id, {}).setdefault(user_id, set())
    if title in got:
        return False
    got.add(title)
    return True

# ========= –ê–î–ú–ò–ù–´ / ALLOWLIST =========
async def _fetch_admins(context: ContextTypes.DEFAULT_TYPE, chat_id: int) -> Set[int]:
    now = datetime.now().timestamp()
    cached = ADMINS_CACHE.get(chat_id)
    if cached and cached[1] > now:
        return cached[0]
    try:
        admins = await context.bot.get_chat_administrators(chat_id)
        ids = {a.user.id for a in admins}
        ADMINS_CACHE[chat_id] = (ids, now + ADMINS_TTL_SEC)
        return ids
    except Exception:
        ADMINS_CACHE[chat_id] = (set(), now + 60)
        return set()

async def _is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    if user_id == OWNER_ID:
        return True
    ids = await _fetch_admins(context, chat_id)
    return user_id in ids

def _is_private(update: Update) -> bool:
    return update.effective_chat and update.effective_chat.type == "private"

def _allowed_chat(chat_id: int) -> bool:
    return chat_id in ALLOW_CHATS

# ========= –°–ï–†–ò–ê–õ–ò–ó–ê–¶–ò–Ø/–ë–≠–ö–ê–ü =========
def _serialize_state() -> dict:
    return {
        "ALLOW_CHATS": list(ALLOW_CHATS),
        "CHAT_TITLES": {str(k): v for k, v in CHAT_TITLES.items()},
        "NICKS": {str(cid): {str(uid): nick for uid, nick in per.items()} for cid, per in NICKS.items()},
        "TAKEN": {str(cid): list(vals) for cid, vals in TAKEN.items()},
        "LAST_NICK": {str(k): v.isoformat() for k, v in LAST_NICK.items()},
        "KNOWN": KNOWN,
        "NAMES": {str(k): v for k, v in NAMES.items()},
        # —Ä–µ–ø–∞ –∏ —Å—á—ë—Ç—á–∏–∫–∏
        "REP_GIVEN": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in REP_GIVEN.items()},
        "REP_RECEIVED": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in REP_RECEIVED.items()},
        "REP_POS_GIVEN": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in REP_POS_GIVEN.items()},
        "REP_NEG_GIVEN": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in REP_NEG_GIVEN.items()},
        "REP_GIVE_TIMES": {
            str(cid): {str(uid): [t.isoformat() for t in arr] for uid, arr in per.items()}
            for cid, per in REP_GIVE_TIMES.items()
        },
        "MSG_COUNT": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in MSG_COUNT.items()},
        "CHAR_COUNT": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in CHAR_COUNT.items()},
        "NICK_CHANGE_COUNT": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in NICK_CHANGE_COUNT.items()},
        "EIGHTBALL_COUNT": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in EIGHTBALL_COUNT.items()},
        "TRIGGER_HITS": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in TRIGGER_HITS.items()},
        "BEER_HITS": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in BEER_HITS.items()},
        "LAST_MSG_AT": {
            str(cid): {str(uid): dt.isoformat() for uid, dt in per.items()}
            for cid, per in LAST_MSG_AT.items()
        },
        "ADMIN_PLUS_GIVEN": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in ADMIN_PLUS_GIVEN.items()},
        "ADMIN_MINUS_GIVEN": {str(cid): {str(uid): int(v) for uid, v in per.items()} for cid, per in ADMIN_MINUS_GIVEN.items()},
        "ACHIEVEMENTS": {
            str(cid): {str(uid): list(titles) for uid, titles in per.items()}
            for cid, per in ACHIEVEMENTS.items()
        },
        # —Ç—Ä–∏–≥–≥–µ—Ä—ã
        "TRIGGERS_CFG": {
            str(cid): per for cid, per in TRIGGERS_CFG.items()
        },
    }

def _apply_state(data: dict, target_chat_id: Optional[int] = None, only_this_chat: bool = False):
    def parse_dt(s): return datetime.fromisoformat(s)

    # allowlist –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    ALLOW_CHATS.clear(); ALLOW_CHATS.update(set(data.get("ALLOW_CHATS", [])))
    CHAT_TITLES.clear(); CHAT_TITLES.update({int(k): v for k, v in data.get("CHAT_TITLES", {}).items()})

    if only_this_chat and target_chat_id is not None:
        cid = str(target_chat_id)

        def get_map(key): return {int(uid): v for uid, v in data.get(key, {}).get(cid, {}).items()}
        def get_map_i(key): return {int(uid): int(v) for uid, v in data.get(key, {}).get(cid, {}).items()}

        NICKS[target_chat_id] = get_map("NICKS")
        TAKEN[target_chat_id] = set(data.get("TAKEN", {}).get(cid, []))
        REP_GIVEN[target_chat_id] = get_map_i("REP_GIVEN")
        REP_RECEIVED[target_chat_id] = get_map_i("REP_RECEIVED")
        REP_POS_GIVEN[target_chat_id] = get_map_i("REP_POS_GIVEN")
        REP_NEG_GIVEN[target_chat_id] = get_map_i("REP_NEG_GIVEN")
        MSG_COUNT[target_chat_id] = get_map_i("MSG_COUNT")
        CHAR_COUNT[target_chat_id] = get_map_i("CHAR_COUNT")
        NICK_CHANGE_COUNT[target_chat_id] = get_map_i("NICK_CHANGE_COUNT")
        EIGHTBALL_COUNT[target_chat_id] = get_map_i("EIGHTBALL_COUNT")
        TRIGGER_HITS[target_chat_id] = get_map_i("TRIGGER_HITS")
        BEER_HITS[target_chat_id] = get_map_i("BEER_HITS")
        ADMIN_PLUS_GIVEN[target_chat_id] = get_map_i("ADMIN_PLUS_GIVEN")
        ADMIN_MINUS_GIVEN[target_chat_id] = get_map_i("ADMIN_MINUS_GIVEN")
        LAST_MSG_AT[target_chat_id] = {int(uid): parse_dt(v) for uid, v in data.get("LAST_MSG_AT", {}).get(cid, {}).items()}
        REP_GIVE_TIMES[target_chat_id] = {int(uid): [parse_dt(t) for t in arr]
                                          for uid, arr in data.get("REP_GIVE_TIMES", {}).get(cid, {}).items()}
        ACHIEVEMENTS[target_chat_id] = {int(uid): set(titles) for uid, titles in data.get("ACHIEVEMENTS", {}).get(cid, {}).items()}

        # —Ç—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞
        TRIGGERS_CFG[target_chat_id] = data.get("TRIGGERS_CFG", {}).get(cid, None)
        return

    # –ü–æ–ª–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    def nested_int_map(obj): return {int(cid): {int(uid): v for uid, v in per.items()} for cid, per in obj.items()}
    def nested_int_map_i(obj): return {int(cid): {int(uid): int(v) for uid, v in per.items()} for cid, per in obj.items()}

    NICKS.clear(); NICKS.update(nested_int_map(data.get("NICKS", {})))
    TAKEN.clear(); TAKEN.update({int(cid): set(vals) for cid, vals in data.get("TAKEN", {}).items()})
    LAST_NICK.clear(); LAST_NICK.update({int(k): parse_dt(v) for k, v in data.get("LAST_NICK", {}).items()})
    KNOWN.clear(); KNOWN.update({k: int(v) for k, v in data.get("KNOWN", {}).items()})
    NAMES.clear(); NAMES.update({int(k): v for k, v in data.get("NAMES", {}).items()})

    REP_GIVEN.clear(); REP_GIVEN.update(nested_int_map_i(data.get("REP_GIVEN", {})))
    REP_RECEIVED.clear(); REP_RECEIVED.update(nested_int_map_i(data.get("REP_RECEIVED", {})))
    REP_POS_GIVEN.clear(); REP_POS_GIVEN.update(nested_int_map_i(data.get("REP_POS_GIVEN", {})))
    REP_NEG_GIVEN.clear(); REP_NEG_GIVEN.update(nested_int_map_i(data.get("REP_NEG_GIVEN", {})))
    REP_GIVE_TIMES.clear()
    for cid, per in data.get("REP_GIVE_TIMES", {}).items():
        REP_GIVE_TIMES[int(cid)] = {int(uid): [parse_dt(t) for t in arr] for uid, arr in per.items()}
    MSG_COUNT.clear(); MSG_COUNT.update(nested_int_map_i(data.get("MSG_COUNT", {})))
    CHAR_COUNT.clear(); CHAR_COUNT.update(nested_int_map_i(data.get("CHAR_COUNT", {})))
    NICK_CHANGE_COUNT.clear(); NICK_CHANGE_COUNT.update(nested_int_map_i(data.get("NICK_CHANGE_COUNT", {})))
    EIGHTBALL_COUNT.clear(); EIGHTBALL_COUNT.update(nested_int_map_i(data.get("EIGHTBALL_COUNT", {})))
    TRIGGER_HITS.clear(); TRIGGER_HITS.update(nested_int_map_i(data.get("TRIGGER_HITS", {})))
    BEER_HITS.clear(); BEER_HITS.update(nested_int_map_i(data.get("BEER_HITS", {})))
    LAST_MSG_AT.clear()
    for cid, per in data.get("LAST_MSG_AT", {}).items():
        LAST_MSG_AT[int(cid)] = {int(uid): parse_dt(v) for uid, v in per.items()}
    ADMIN_PLUS_GIVEN.clear(); ADMIN_PLUS_GIVEN.update(nested_int_map_i(data.get("ADMIN_PLUS_GIVEN", {})))
    ADMIN_MINUS_GIVEN.clear(); ADMIN_MINUS_GIVEN.update(nested_int_map_i(data.get("ADMIN_MINUS_GIVEN", {})))
    ACHIEVEMENTS.clear()
    for cid, per in data.get("ACHIEVEMENTS", {}).items():
        ACHIEVEMENTS[int(cid)] = {int(uid): set(titles) for uid, titles in per.items()}

    # —Ç—Ä–∏–≥–≥–µ—Ä—ã
    TRIGGERS_CFG.clear()
    for cid, arr in data.get("TRIGGERS_CFG", {}).items():
        TRIGGERS_CFG[int(cid)] = arr

def _build_compiled_triggers_for_chat(chat_id: int):
    """–ü–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π/–º–∏–≥—Ä–∞—Ü–∏–∏."""
    lst = TRIGGERS_CFG.get(chat_id) or []
    compiled = []
    for t in lst:
        try:
            if not t.get("enabled", True):
                compiled.append((None, t.get("answers", []), t.get("name",""), False))
                continue
            if t.get("is_regex", True):
                flags = re.IGNORECASE if t.get("ignore_case", True) else 0
                pat = re.compile(t.get("pattern",""), flags)
                compiled.append((pat, t.get("answers", []), t.get("name",""), True))
            else:
                # –ø—Ä–æ—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞: —Å–æ–±–µ—Ä—ë–º regex c —É—á—ë—Ç–æ–º –≥—Ä–∞–Ω–∏—Ü/—Ä–µ–≥–∏—Å—Ç—Ä–∞
                esc = re.escape(t.get("pattern",""))
                if t.get("word_boundaries", False):
                    esc = r"\b" + esc + r"\b"
                flags = re.IGNORECASE if t.get("ignore_case", True) else 0
                pat = re.compile(esc, flags)
                compiled.append((pat, t.get("answers", []), t.get("name",""), True))
        except Exception:
            # –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç—Ä–∏–≥–≥–µ—Ä ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            continue
    TRIGGERS_COMPILED[chat_id] = compiled

async def cloud_save():
    payload = _serialize_state()
    text = json.dumps(payload, ensure_ascii=False, indent=2)

    # –ª–æ–∫–∞–ª—å–Ω—ã–π –±—ç–∫–∞–ø
    try:
        with open(LOCAL_BACKUP, "w", encoding="utf-8") as f:
            f.write(text)
    except Exception:
        pass

    if not (GIST_TOKEN and GIST_ID):
        return

    url = f"https://api.github.com/gists/{GIST_ID}"
    headers = {"Authorization": f"Bearer {GIST_TOKEN}", "Accept": "application/vnd.github+json"}
    async with httpx.AsyncClient(timeout=12.0) as client:
        try:
            await client.patch(url, json={"files": {GIST_FILENAME: {"content": text}}}, headers=headers)
        except Exception:
            pass

async def cloud_load_if_any():
    # 1) Gist
    if GIST_TOKEN and GIST_ID:
        url = f"https://api.github.com/gists/{GIST_ID}"
        headers = {"Authorization": f"Bearer {GIST_TOKEN}", "Accept": "application/vnd.github+json"}
        async with httpx.AsyncClient(timeout=12.0) as client:
            try:
                r = await client.get(url, headers=headers)
                if r.status_code == 200:
                    j = r.json()
                    files = j.get("files", {})
                    if GIST_FILENAME in files and files[GIST_FILENAME].get("content"):
                        data = json.loads(files[GIST_FILENAME]["content"])
                        _apply_state(data, only_this_chat=False)
                        # –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
                        for cid in list(TRIGGERS_CFG.keys()):
                            _build_compiled_triggers_for_chat(cid)
                        return
            except Exception:
                pass
    # 2) –ª–æ–∫–∞–ª—å–Ω—ã–π
    try:
        if os.path.exists(LOCAL_BACKUP):
            with open(LOCAL_BACKUP, "r", encoding="utf-8") as f:
                data = json.load(f)
            _apply_state(data, only_this_chat=False)
            for cid in list(TRIGGERS_CFG.keys()):
                _build_compiled_triggers_for_chat(cid)
    except Exception:
        pass

# ========= HEALTH / Flask =========
app = Flask(__name__)

@app.get("/")
def root():
    return "Bot is running!"

@app.get("/health")
def health():
    return "ok"

@app.get("/healthz")
def healthz():
    return "ok"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port, threaded=True, use_reloader=False)

# ========= –ü–†–ò–í–ê–¢–ù–´–ô / –ì–†–£–ü–ü–û–í–û–ô –§–ò–õ–¨–¢–† =========
async def _guard_private_access(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –õ–°."""
    if not _is_private(update):
        return True
    uid = update.effective_user.id if update.effective_user else 0
    if uid == OWNER_ID:
        return True
    # –ø—Ä–æ—Å—Ç—ã–º —é–∑–µ—Ä–∞–º –≤ –õ–° ‚Äî –Ω–∏—á–µ–≥–æ
    await context.bot.send_message(uid, "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –≤ —á–∞—Ç–µ.")
    return False

# ========= –°–¢–ê–†–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ / –ú–ï–ù–Æ =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        # –õ–°: —Ñ–∏–ª—å—Ç—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        if not await _guard_private_access(update, context):
            return
    if update.message:
        await _remember_user(update.effective_user)
        if update.effective_chat.type != "private":
            # —Å–æ—Ö—Ä–∞–Ω–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            CHAT_TITLES[update.effective_chat.id] = update.effective_chat.title or str(update.effective_chat.id)
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if update.message:
        await update.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer("–°–µ–∫—É–Ω–¥—É‚Ä¶", show_alert=False)
    data = q.data
    if data == BTN_HELP:
        await q.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())
    elif data == BTN_STATS:
        await q.message.reply_text(build_stats_text(update.effective_chat.id), reply_markup=main_keyboard())
    else:
        await q.message.reply_text("¬Ø\\_(„ÉÑ)_/¬Ø –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=main_keyboard())

# ========= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï: –û–ß–ò–°–¢–ö–ò –ü–û –ß–ê–¢–£/–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ =========
def _clear_user_in_chat(chat_id: int, uid: int):
    if uid in NICKS.get(chat_id, {}):
        old = NICKS[chat_id].pop(uid, None)
        if old:
            TAKEN.get(chat_id, set()).discard(old)
    for store in (REP_GIVEN, REP_RECEIVED, REP_POS_GIVEN, REP_NEG_GIVEN,
                  MSG_COUNT, CHAR_COUNT, NICK_CHANGE_COUNT, EIGHTBALL_COUNT,
                  TRIGGER_HITS, BEER_HITS, ADMIN_PLUS_GIVEN, ADMIN_MINUS_GIVEN):
        if uid in store.get(chat_id, {}):
            store[chat_id].pop(uid, None)
    if uid in LAST_MSG_AT.get(chat_id, {}):
        LAST_MSG_AT[chat_id].pop(uid, None)
    if uid in REP_GIVE_TIMES.get(chat_id, {}):
        REP_GIVE_TIMES[chat_id].pop(uid, None)
    if uid in ACHIEVEMENTS.get(chat_id, {}):
        ACHIEVEMENTS[chat_id].pop(uid, None)

def _clear_chat(chat_id: int):
    NICKS[chat_id] = {}
    TAKEN[chat_id] = set()
    REP_GIVEN[chat_id] = {}
    REP_RECEIVED[chat_id] = {}
    REP_POS_GIVEN[chat_id] = {}
    REP_NEG_GIVEN[chat_id] = {}
    REP_GIVE_TIMES[chat_id] = {}
    MSG_COUNT[chat_id] = {}
    CHAR_COUNT[chat_id] = {}
    NICK_CHANGE_COUNT[chat_id] = {}
    EIGHTBALL_COUNT[chat_id] = {}
    TRIGGER_HITS[chat_id] = {}
    BEER_HITS[chat_id] = {}
    LAST_MSG_AT[chat_id] = {}
    ADMIN_PLUS_GIVEN[chat_id] = {}
    ADMIN_MINUS_GIVEN[chat_id] = {}
    ACHIEVEMENTS[chat_id] = {}

# ========= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =========
def build_stats_text(chat_id: int) -> str:
    def top10(d: Dict[int, int]) -> List[Tuple[int, int]]:
        return sorted(d.items(), key=lambda x: x[1], reverse=True)[:10]

    top = top10(REP_RECEIVED.get(chat_id, {}))
    top_lines = [f"‚Ä¢ {_name_or_id(uid)}: {score}" for uid, score in top] or ["‚Ä¢ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"]

    nick_items = NICKS.get(chat_id, {})
    nick_lines = [f"‚Ä¢ {_name_or_id(uid)}: {nick}" for uid, nick in nick_items.items()] or ["‚Ä¢ –ø–æ–∫–∞ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ"]

    top_msg = top10(MSG_COUNT.get(chat_id, {}))
    msg_lines = [f"‚Ä¢ {_name_or_id(uid)}: {cnt} —Å–º—Å / {CHAR_COUNT.get(chat_id, {}).get(uid,0)} —Å–∏–º–≤."
                 for uid, cnt in top_msg] or ["‚Ä¢ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"]

    ach_lines = []
    for uid, titles in ACHIEVEMENTS.get(chat_id, {}).items():
        if not titles:
            continue
        ach_lines.append(f"‚Ä¢ {_name_or_id(uid)}: {', '.join(sorted(titles))}")
    if not ach_lines:
        ach_lines = ["‚Ä¢ –ø–æ–∫–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç"]

    title = CHAT_TITLES.get(chat_id, str(chat_id))
    return (
        f"{STATS_TITLE} ‚Äî {title}\n\n"
        "üèÜ –¢–æ–ø-10 –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:\n" + "\n".join(top_lines) + "\n\n"
        "üìù –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏:\n" + "\n".join(nick_lines) + "\n\n"
        "‚å®Ô∏è –¢–æ–ø-10 –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n" + "\n".join(msg_lines) + "\n\n"
        "üèÖ –ê—á–∏–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(ach_lines)
    )

# ========= –ù–ò–ö–ò =========
ADJ = ["—à–∞–ª—å–Ω–æ–π","—Ö—Ä—É—Å—Ç—è—â–∏–π","–ª—ã—Å—ã–π","–±—É—Ä–ª—è—â–∏–π","–ª–∞–º–ø–æ–≤—ã–π","–∫–æ–≤–∞—Ä–Ω—ã–π","–±–∞—Ä—Ö–∞—Ç–Ω—ã–π","–¥–µ—Ä–∑–∫–∏–π","–º—è–≥–∫–æ—Ç–µ–ª—ã–π",
       "—Å—Ç–∞–ª—å–Ω–æ–π","—Å–æ–Ω–Ω—ã–π","–±—Ä–∞–≤—ã–π","—Ö–∏—Ç—Ä—ã–π","–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π","—Å–æ–ª—ë–Ω—ã–π","–¥—ã–º–Ω—ã–π","–ø—Ä—è–Ω—ã–π","–±–æ–¥—Ä—ã–π","—Ç—ë–ø–ª—ã–π",
       "–≥—Ä–æ–∑–Ω—ã–π","–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π","–±–∞—Ä—Å–∫–∏–π","–≤–µ—Å—ë–ª—ã–π","—Ä–∞–Ω–¥–æ–º–Ω—ã–π","–≤–µ–ª–∏–∫–æ—Å–≤–µ—Ç—Å–∫–∏–π"]
NOUN = ["—ë–∂","–∫—Ä–∞–±","–±–∞—Ä—Å—É–∫","–∂–∏—Ä–∞—Ñ","–∫–∞—Ä–∞—Å—å","–±–∞—Ä–æ–Ω","–ø–∏—Ä–∞—Ç","—Å–∞–º—É—Ä–∞–π","—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç","–∫–ª–æ—É–Ω","–≤–æ–ª–∫","–∫–æ—Ç",
        "–∫–∞–±–∞–Ω","–º–µ–¥–≤–µ–¥—å","—Å–æ–≤–∞","–¥—Ä–∞–∫–æ–Ω–¥–æ–Ω","–≥—É—Å—å","–∫–æ–∑—ã—Ä—å","–¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","—à–∞–º–∞–Ω","–∫–∏–±–æ—Ä–≥","–∞—Ä–±—É–∑","–∫–æ–ª–æ–±–æ–∫",
        "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä","—á–µ—Ä–≤—è–∫"]
TAILS = ["–∏–∑ –ø–æ–¥—ä–µ–∑–¥–∞ ‚Ññ3","—Å –ø—Ä–∏–≤–µ—Ç–æ–º","–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö","XL","–≤ —Ç–∞–ø–∫–∞—Ö","–∏–∑ –±—É–¥—É—â–µ–≥–æ","–ø—Ä–∏ –±–∞–±–æ—á–∫–µ","deluxe",
         "edition 2.0","–±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤","–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ","—Å –æ–≥–æ–Ω—å–∫–æ–º","–≤ –æ—Ç—Å—Ç–∞–≤–∫–µ","–Ω–∞ –±–æ–±–∏–Ω–µ","turbo","‚Ñ¢Ô∏è",
         "prime","–Ω–∞ —Ä–∞–π–æ–Ω–µ","—Å —Å—é—Ä–ø—Ä–∏–∑–æ–º","VIP"]
EMOJIS = ["ü¶î","ü¶Ä","ü¶ä","üêª","üê∫","üêó","üê±","ü¶â","üêü","ü¶Ü","ü¶Ñ","üê≤","ü•í","üçâ","üßÄ","üçî","üç∫","‚òïÔ∏è","üî•","üí£","‚ú®","üõ†Ô∏è","üëë","üõ∏"]
SPICY = ["–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø","—Ö–∏—Ç—Ä–æ–∂–æ–ø","–∑–∞–¥–æ—Ä–Ω—ã–π –±—É–∑–æ—Ç—ë—Ä","–ø–æ—Ä–æ—á–Ω—ã–π –¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","–¥–≤–æ—Ä–æ–≤—ã–π –∫–Ω—è–∑—å",
         "–±–∞—Ä–æ–Ω —Å –ø–æ–Ω—Ç–∞–º–∏","—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç","—Å–∞–º—É—Ä–∞–π-–Ω–µ–¥–æ—É—á–∫–∞","–∫–∏–±–æ—Ä–≥ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Ö",
         "–ø–∏—Ä–∞—Ç –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏","–∫–ª–æ—É–Ω-–ø–æ—Ñ–∏–≥–∏—Å—Ç","–±–∞—Ä—Å—É–∫-–±—Ä–æ–¥—è–≥–∞"]

def _make_nick(chat_id: int, prev: Optional[str]) -> str:
    taken = TAKEN.setdefault(chat_id, set())
    for _ in range(80):
        parts = []
        parts.append(random.choice(SPICY) if random.random() < 0.25 else random.choice(ADJ))
        parts.append(random.choice(NOUN))
        if random.random() < 0.85:
            parts.append(random.choice(TAILS))
        nick = " ".join(parts)
        if random.random() < 0.7:
            nick += " " + random.choice(EMOJIS)
        if prev and nick == prev:
            continue
        if nick in taken:
            continue
        return nick
    return f"{random.choice(ADJ)} {random.choice(NOUN)} {random.choice(TAILS)}"

def _apply_nick(chat_id: int, user_id: int, new_nick: str):
    prev = NICKS[chat_id].get(user_id)
    if prev:
        TAKEN[chat_id].discard(prev)
    NICKS[chat_id][user_id] = new_nick
    TAKEN[chat_id].add(new_nick)
    _inc(NICK_CHANGE_COUNT[chat_id], user_id)

async def cmd_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not update.message:
        return
    await _remember_user(update.effective_user)

    chat_id = update.effective_chat.id
    _ensure_chat(chat_id)

    initiator = update.effective_user
    cd = _cooldown_text(initiator.id)
    if cd:
        await update.message.reply_text(f"–ü–æ—Ç–µ—Ä–ø–∏, {cd}")
        return

    target_user: Optional[User] = None
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        target_user = update.message.reply_to_message.from_user

    target_id: Optional[int] = None
    target_name: Optional[str] = None
    if target_user:
        target_id = target_user.id
        target_name = _display_name(target_user)
        await _remember_user(target_user)
    else:
        if update.message.text:
            parts = update.message.text.split()
            if len(parts) >= 2 and parts[1].startswith("@"):
                uid = KNOWN.get(parts[1][1:].lower())
                if uid:
                    target_id = uid
                    target_name = parts[1]

    if target_id is None:
        target_id = initiator.id
        target_name = _display_name(initiator)

    prev = NICKS[chat_id].get(target_id)
    new_nick = _make_nick(chat_id, prev)
    async with STATE_LOCK:
        _apply_nick(chat_id, target_id, new_nick)
        _mark_nick(initiator.id)
        cnt = NICK_CHANGE_COUNT[chat_id].get(target_id, 0)
        nick5 = (cnt >= 5 and _achieve(chat_id, target_id, "–ù–∏–∫–æ—Ñ–∏–ª –µ–±—É—á–∏–π"))
        nick10 = (cnt >= 10 and _achieve(chat_id, target_id, "–ù–∏–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"))
    if nick5:
        await _announce_achievement(context, chat_id, target_id, "–ù–∏–∫–æ—Ñ–∏–ª –µ–±—É—á–∏–π")
    if nick10:
        await _announce_achievement(context, chat_id, target_id, "–ù–∏–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä")
    if target_id != initiator.id and await _is_admin(chat_id, target_id, context):
        if _achieve(chat_id, initiator.id, "–¢—Ä–æ–Ω–æ–ª–æ–º"):
            await _announce_achievement(context, chat_id, initiator.id, "–¢—Ä–æ–Ω–æ–ª–æ–º")
    if target_id == initiator.id:
        await update.message.reply_text(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫: ¬´{new_nick}¬ª")
    else:
        await update.message.reply_text(f"{target_name} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω(–∞) –∫–∞–∫ ¬´{new_nick}¬ª")

# ========= /8BALL =========
EIGHT_BALL = [
    "–î–∞ ‚úÖ","–ù–µ—Ç ‚ùå","–í–æ–∑–º–æ–∂–Ω–æ ü§î","–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç","–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ üïê","–°—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ üíØ",
    "–ï—Å—Ç—å —à–∞–Ω—Å, –Ω–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è","–ù–µ —Ä–∏—Å–∫—É–π","–õ—É—á—à–µ –ø—Ä–æ–º–æ–ª—á—É","–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç ¬´–¥–∞¬ª ‚ú®",
    "–≠—Ç–æ —Å—É–¥—å–±–∞","–®–∞–Ω—Å—ã –º–∞–ª—ã","–¢–æ—á–Ω–æ –Ω–µ—Ç","–õ–µ–≥–µ–Ω–¥—ã —à–µ–ø—á—É—Ç ¬´–¥–∞¬ª","–ù–µ —Å–µ–π—á–∞—Å",
    "–ê–±—Å–æ–ª—é—Ç–Ω–æ","–ú-–¥–∞‚Ä¶ —Ç–∞–∫–æ–µ —Å–µ–±–µ","–û—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è","–•–∞-—Ö–∞, –∫–æ–Ω–µ—á–Ω–æ!","–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π"
]
async def cmd_8ball(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not update.message:
        return
    await _remember_user(update.effective_user)
    chat_id = update.effective_chat.id
    _ensure_chat(chat_id)
    uid = update.effective_user.id
    async with STATE_LOCK:
        _inc(EIGHTBALL_COUNT[chat_id], uid)
        c10 = (EIGHTBALL_COUNT[chat_id].get(uid, 0) >= 10 and _achieve(chat_id, uid, "–®–∞—Ä–æ–º–∞–Ω –¥–æ–ª–±–∞–Ω–Ω—ã–π"))
        c30 = (EIGHTBALL_COUNT[chat_id].get(uid, 0) >= 30 and _achieve(chat_id, uid, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ—á–µ—Ä —à–∞—Ä–∞"))
    if c10:
        await _announce_achievement(context, chat_id, uid, "–®–∞—Ä–æ–º–∞–Ω –¥–æ–ª–±–∞–Ω–Ω—ã–π")
    if c30:
        await _announce_achievement(context, chat_id, uid, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ—á–µ—Ä —à–∞—Ä–∞")
    q = " ".join(context.args).strip()
    if not q:
        await update.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å: `/8ball —Å—Ç–æ–∏—Ç –ª–∏ –∏–¥—Ç–∏ –∑–∞ –ø–∏–≤–æ–º?`", parse_mode="Markdown")
        return
    await update.message.reply_text(random.choice(EIGHTBALL))

# ========= –†–ï–ü–£–¢–ê–¶–ò–Ø/–¢–†–ò–ì–ì–ï–†–´/NSFW =========
REP_CMD = re.compile(r"^[\+\-]1(\b|$)", re.IGNORECASE)
NSFW_RX = re.compile(r"\b(—Å–µ–∫—Å|69|–∫—É—Ç—ë–∂|–∂–æ–ø|–ø–µ—Ä–¥|—Ñ–∞–ª–ª|—ç—Ä–æ—Ç|–ø–æ—Ä–Ω|xxx|üçë|üçÜ)\b", re.IGNORECASE)

async def _announce_achievement(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int, title: str):
    name = NAMES.get(user_id, f"id{user_id}")
    desc = ACH_LIST.get(title, ("", ""))[0]
    try:
        await context.bot.send_message(chat_id, f"üèÖ {html.escape(name)} –ø–æ–ª—É—á–∞–µ—Ç –∞—á–∏–≤–∫—É: <b>{html.escape(title)}</b> ‚Äî {html.escape(desc)}", parse_mode="HTML")
    except Exception:
        pass

def _within_limit_and_mark(chat_id: int, giver_id: int) -> Tuple[bool, Optional[int]]:
    now = datetime.now(UTC)
    per_chat = REP_GIVE_TIMES.setdefault(chat_id, {})
    arr = per_chat.get(giver_id, [])
    arr = [t for t in arr if now - t < REP_WINDOW]
    per_chat[giver_id] = arr
    if len(arr) >= REP_DAILY_LIMIT:
        oldest = min(arr)
        secs = int((oldest + REP_WINDOW - now).total_seconds())
        return False, max(1, secs)
    arr.append(now)
    per_chat[giver_id] = arr
    return True, None

def _ensure_triggers_migrated(chat_id: int):
    if TRIGGERS_CFG.get(chat_id) is None:
        # —Å–æ–∑–¥–∞—Ç—å –∏–∑ –¥–µ—Ñ–æ–ª—Ç–∞ (–∫–æ–ø–∏—è)
        TRIGGERS_CFG[chat_id] = [TriggerCfg(dict(t)) for t in DEFAULT_TRIGGERS]
        _build_compiled_triggers_for_chat(chat_id)

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.from_user is None:
        return
    if msg.from_user.is_bot:
        return

    # –ì–†–£–ü–ü–´: –ø—Ä–æ–≤–µ—Ä—è–µ–º allowlist
    if update.effective_chat.type in ("group", "supergroup"):
        chat_id = update.effective_chat.id
        if not _allowed_chat(chat_id):
            # –ï—Å–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É, –∏–Ω–∞—á–µ —É—Ö–æ–¥–∏–º
            if update.effective_user and update.effective_user.id == OWNER_ID and msg.text and msg.text.startswith("/allowchat"):
                pass  # –≤–ª–∞–¥–µ–ª–µ—Ü —Å–µ–π—á–∞—Å —Ä–∞–∑—Ä–µ—à–∏—Ç
            else:
                try:
                    await msg.reply_text("üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
                except Exception:
                    pass
                try:
                    await context.bot.leave_chat(chat_id)
                except Exception:
                    pass
                return

    # –õ–°: —Ñ–∏–ª—å—Ç—Ä
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return

    # –ó–∞–ø–æ–º–Ω–∏–º –∏–º—è/@username
    await _remember_user(msg.from_user)

    chat_id = update.effective_chat.id
    _ensure_chat(chat_id)
    CHAT_TITLES[chat_id] = update.effective_chat.title or str(chat_id)

    # === 0) AFK-–∞—á–∏–≤–∫–∏ ===
    now = datetime.now(UTC)
    uid = msg.from_user.id
    prev = LAST_MSG_AT[chat_id].get(uid)
    if prev:
        gap = now - prev
        if gap >= timedelta(days=5) and _achieve(chat_id, uid, "–ü–æ—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ–≤"):
            await _announce_achievement(context, chat_id, uid, "–ü–æ—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ–≤")
        elif gap >= timedelta(days=3) and _achieve(chat_id, uid, "–°–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ ***"):
            await _announce_achievement(context, chat_id, uid, "–°–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ ***")
    LAST_MSG_AT[chat_id][uid] = now

    # === 1) –°—á—ë—Ç—á–∏–∫–∏ ===
    text = (msg.text or "")
    async with STATE_LOCK:
        _inc(MSG_COUNT[chat_id], uid)
        _inc(CHAR_COUNT[chat_id], uid, by=len(text))
        if CHAR_COUNT[chat_id].get(uid, 0) >= 5000 and _achieve(chat_id, uid, "–ö–ª–∞–≤–æ–¥—Ä–æ–±–∏–ª–∫–∞"):
            await _announce_achievement(context, chat_id, uid, "–ö–ª–∞–≤–æ–¥—Ä–æ–±–∏–ª–∫–∞")
        if CHAR_COUNT[chat_id].get(uid, 0) >= 20000 and _achieve(chat_id, uid, "–°–ª–æ–≤–µ—Å–Ω—ã–π –ø–æ–Ω–æ—Å"):
            await _announce_achievement(context, chat_id, uid, "–°–ª–æ–≤–µ—Å–Ω—ã–π –ø–æ–Ω–æ—Å")
        if MSG_COUNT[chat_id].get(uid, 0) >= 100 and _achieve(chat_id, uid, "–ü–∏—Å–∞—Ä—å-–º–∞—Ö–æ–≤–∏–∫"):
            await _announce_achievement(context, chat_id, uid, "–ü–∏—Å–∞—Ä—å-–º–∞—Ö–æ–≤–∏–∫")
        if MSG_COUNT[chat_id].get(uid, 0) >= 300 and _achieve(chat_id, uid, "–§–ª—É–¥–µ—Ä–∞—Å—Ç"):
            await _announce_achievement(context, chat_id, uid, "–§–ª—É–¥–µ—Ä–∞—Å—Ç")

    t = text.strip()
    if not t:
        return

    # === 2) –†–µ–ø—É—Ç–∞—Ü–∏—è (+1/-1) ===
    if REP_CMD.match(t):
        is_plus = t.startswith("+")
        giver = msg.from_user
        target_user: Optional[User] = None
        target_id: Optional[int] = None
        target_name: Optional[str] = None

        if msg.reply_to_message and msg.reply_to_message.from_user:
            target_user = msg.reply_to_message.from_user
            target_id = target_user.id
            target_name = _display_name(target_user)
            await _remember_user(target_user)
        else:
            parts = t.split()
            if len(parts) >= 2 and parts[1].startswith("@"):
                uid2 = KNOWN.get(parts[1][1:].lower())
                if uid2:
                    target_id = uid2
                    target_name = parts[1]

        if target_id is None:
            await msg.reply_text("–ö–æ–º—É —Å—Ç–∞–≤–∏–º —Ä–µ–ø—É? –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏ @username.")
            return

        ok, secs_left = _within_limit_and_mark(chat_id, giver.id)
        if not ok:
            mins = (secs_left or 60) // 60
            await msg.reply_text(f"–õ–∏–º–∏—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –∏—Å—á–µ—Ä–ø–∞–Ω –Ω–∞ 24—á (10/10). –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ ~{mins} –º–∏–Ω.")
            return

        if is_plus and target_id == giver.id:
            if _achieve(chat_id, giver.id, "–ß–∏—Ç–µ—Ä —ë–±–∞–Ω—ã–π"):
                await msg.reply_text("¬´–ß–∏—Ç–µ—Ä —ë–±–∞–Ω—ã–π¬ª üèÖ ‚Äî –∑–∞ –ø–æ–ø—ã—Ç–∫—É +1 —Å–µ–±–µ. –ù–µ–ª—å–∑—è!")
            else:
                await msg.reply_text("–ù–µ–ª—å–∑—è +1 —Å–µ–±–µ, —Ö–æ—Ä–æ—à –º—É—Ö–ª–µ–≤–∞—Ç—å üêç")
            return

        delta = 1 if is_plus else -1
        async with STATE_LOCK:
            _inc(REP_RECEIVED[chat_id], target_id, by=delta)
            _inc(REP_GIVEN[chat_id], giver.id, by=delta)
            if delta > 0:
                _inc(REP_POS_GIVEN[chat_id], giver.id)
            else:
                _inc(REP_NEG_GIVEN[chat_id], giver.id)

        try:
            if await _is_admin(chat_id, target_id, context):
                if delta > 0:
                    _inc(ADMIN_PLUS_GIVEN[chat_id], giver.id)
                    if ADMIN_PLUS_GIVEN[chat_id].get(giver.id, 0) >= 5 and _achieve(chat_id, giver.id, "–ü–æ–¥—Ö–∞–ª–∏–º –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π"):
                        await _announce_achievement(context, chat_id, giver.id, "–ü–æ–¥—Ö–∞–ª–∏–º –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π")
                else:
                    _inc(ADMIN_MINUS_GIVEN[chat_id], giver.id)
                    if ADMIN_MINUS_GIVEN[chat_id].get(giver.id, 0) >= 3 and _achieve(chat_id, giver.id, "–£–∂–∞–ª–∏–ª –∫–æ—Ä–æ–ª—è"):
                        await _announce_achievement(context, chat_id, giver.id, "–£–∂–∞–ª–∏–ª –∫–æ—Ä–æ–ª—è")
        except Exception:
            pass

        total = REP_RECEIVED[chat_id].get(target_id, 0)
        if total >= 20 and _achieve(chat_id, target_id, "–õ—é–±–∏–º—á–∏–∫, —Å—É–∫–∞"):
            await _announce_achievement(context, chat_id, target_id, "–õ—é–±–∏–º—á–∏–∫, —Å—É–∫–∞")
        if total <= -10 and _achieve(chat_id, target_id, "–¢–æ–∫—Å–∏–∫-–º–∞–≥–Ω–∏—Ç"):
            await _announce_achievement(context, chat_id, target_id, "–¢–æ–∫—Å–∏–∫-–º–∞–≥–Ω–∏—Ç")
        if total >= 50 and _achieve(chat_id, target_id, "–ö—Ä—É—Ç–æ–π —á–µ–ª"):
            await _announce_achievement(context, chat_id, target_id, "–ö—Ä—É—Ç–æ–π —á–µ–ª")
        if total <= -20 and _achieve(chat_id, target_id, "–û–ø—É—â–µ–Ω–Ω—ã–π"):
            await _announce_achievement(context, chat_id, target_id, "–û–ø—É—â–µ–Ω–Ω—ã–π")

        total_gives = REP_POS_GIVEN[chat_id].get(giver.id, 0) + REP_NEG_GIVEN[chat_id].get(giver.id, 0)
        if total_gives >= 20 and _achieve(chat_id, giver.id, "–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫"):
            await _announce_achievement(context, chat_id, giver.id, "–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫")
        if REP_POS_GIVEN[chat_id].get(giver.id, 0) >= 10 and _achieve(chat_id, giver.id, "–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü"):
            await _announce_achievement(context, chat_id, giver.id, "–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü")
        if REP_NEG_GIVEN[chat_id].get(giver.id, 0) >= 10 and _achieve(chat_id, giver.id, "–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫"):
            await _announce_achievement(context, chat_id, giver.id, "–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫")

        sign = "+" if delta > 0 else "-"
        await msg.reply_text(f"{_name_or_id(target_id)} –ø–æ–ª—É—á–∞–µ—Ç {sign}1. –¢–µ–∫—É—â–∞—è —Ä–µ–ø–∞: {total}")
        return

    # === 3) –¢—Ä–∏–≥–≥–µ—Ä—ã ===
    _ensure_triggers_migrated(chat_id)
    compiled = TRIGGERS_COMPILED.get(chat_id, [])
    for idx, (pat, answers, name, enabled) in enumerate(compiled):
        if not enabled or not pat:
            continue
        if pat.search(t) and _trigger_allowed(chat_id):
            await msg.reply_text(random.choice(answers))
            _inc(TRIGGER_HITS[chat_id], uid)
            # —Å–ø–µ—Ü-—É—á—ë—Ç "–ø–∏–≤–∞" –ø–æ id —Ç—Ä–∏–≥–≥–µ—Ä–∞
            try:
                trig_id = (TRIGGERS_CFG.get(chat_id) or [])[idx].get("id","")
                if trig_id == "beer":
                    _inc(BEER_HITS[chat_id], uid)
                    if BEER_HITS[chat_id].get(uid, 0) >= 5 and _achieve(chat_id, uid, "–ü–∏–≤–Ω–æ–π —Å–æ–º–µ–ª—å–µ-–∞–ª–∫–∞—à"):
                        await _announce_achievement(context, chat_id, uid, "–ü–∏–≤–Ω–æ–π —Å–æ–º–µ–ª—å–µ-–∞–ª–∫–∞—à")
                    if BEER_HITS[chat_id].get(uid, 0) >= 20 and _achieve(chat_id, uid, "–ü–∏–≤–æ–∑–∞–≤—Ä"):
                        await _announce_achievement(context, chat_id, uid, "–ü–∏–≤–æ–∑–∞–≤—Ä")
            except Exception:
                pass
            if TRIGGER_HITS[chat_id].get(uid, 0) >= 15 and _achieve(chat_id, uid, "–¢—Ä–∏–≥–≥–µ—Ä-–º–µ–π–∫–µ—Ä"):
                await _announce_achievement(context, chat_id, uid, "–¢—Ä–∏–≥–≥–µ—Ä-–º–µ–π–∫–µ—Ä")
            break

    # === 4) NSFW ===
    if NSFW_RX.search(t):
        if _achieve(chat_id, uid, "–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç"):
            await _announce_achievement(context, chat_id, uid, "–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç")

# ========= –≠–ö–°–ü–û–†–¢ / –ò–ú–ü–û–†–¢ =========
async def _ensure_admin(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    if user_id == OWNER_ID:
        return True
    member = await context.bot.get_chat_member(chat_id, user_id)
    return member.status in ("administrator", "creator")

async def cmd_export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not await _ensure_admin(update, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç üö´")
        return
    data = _serialize_state()
    fname = f"export_all.json"
    try:
        with open(fname, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        await update.message.reply_document(InputFile(fname))
    finally:
        try: os.remove(fname)
        except Exception: pass

async def cmd_export_here(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not await _ensure_admin(update, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç üö´")
        return
    chat_id = update.effective_chat.id
    snapshot = _serialize_state()

    def only_chat(section):
        return {str(chat_id): section.get(str(chat_id), {})}

    slim = {
        "ALLOW_CHATS": list(ALLOW_CHATS),
        "CHAT_TITLES": {str(chat_id): CHAT_TITLES.get(chat_id, str(chat_id))},
        "NICKS": {str(chat_id): snapshot["NICKS"].get(str(chat_id), {})},
        "TAKEN": {str(chat_id): snapshot["TAKEN"].get(str(chat_id), [])},
        "LAST_NICK": snapshot["LAST_NICK"],
        "KNOWN": snapshot["KNOWN"],
        "NAMES": snapshot["NAMES"],
        "REP_GIVEN": only_chat(snapshot["REP_GIVEN"]),
        "REP_RECEIVED": only_chat(snapshot["REP_RECEIVED"]),
        "REP_POS_GIVEN": only_chat(snapshot["REP_POS_GIVEN"]),
        "REP_NEG_GIVEN": only_chat(snapshot["REP_NEG_GIVEN"]),
        "REP_GIVE_TIMES": only_chat(snapshot["REP_GIVE_TIMES"]),
        "MSG_COUNT": only_chat(snapshot["MSG_COUNT"]),
        "CHAR_COUNT": only_chat(snapshot["CHAR_COUNT"]),
        "NICK_CHANGE_COUNT": only_chat(snapshot["NICK_CHANGE_COUNT"]),
        "EIGHTBALL_COUNT": only_chat(snapshot["EIGHTBALL_COUNT"]),
        "TRIGGER_HITS": only_chat(snapshot["TRIGGER_HITS"]),
        "BEER_HITS": only_chat(snapshot["BEER_HITS"]),
        "LAST_MSG_AT": only_chat(snapshot["LAST_MSG_AT"]),
        "ADMIN_PLUS_GIVEN": only_chat(snapshot["ADMIN_PLUS_GIVEN"]),
        "ADMIN_MINUS_GIVEN": only_chat(snapshot["ADMIN_MINUS_GIVEN"]),
        "ACHIEVEMENTS": only_chat(snapshot["ACHIEVEMENTS"]),
        "TRIGGERS_CFG": {str(chat_id): TRIGGERS_CFG.get(chat_id, [])},
    }

    fname = f"export_chat_{chat_id}.json"
    try:
        with open(fname, "w", encoding="utf-8") as f:
            json.dump(slim, f, ensure_ascii=False, indent=2)
        await update.message.reply_document(InputFile(fname))
    finally:
        try: os.remove(fname)
        except Exception: pass

async def cmd_import(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not update.message or not update.message.document:
        await update.message.reply_text("–ü—Ä–∏–∫—Ä–µ–ø–∏ JSON-—Ñ–∞–π–ª —Å —ç–∫—Å–ø–æ—Ä—Ç–æ–º.")
        return
    if not await _ensure_admin(update, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–µ–ª–∞—Ç—å –∏–º–ø–æ—Ä—Ç üö´")
        return
    chat_id = update.effective_chat.id
    try:
        file = await context.bot.get_file(update.message.document)
        path = f"import_{chat_id}.json"
        await file.download_to_drive(path)
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        async with STATE_LOCK:
            _apply_state(data, target_chat_id=chat_id, only_this_chat=True)
            # –ø–µ—Ä–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            _ensure_triggers_migrated(chat_id)
            _build_compiled_triggers_for_chat(chat_id)
            await cloud_save()
        await update.message.reply_text("–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π —á–∞—Ç)")
    except json.JSONDecodeError:
        await update.message.reply_text("–§–∞–π–ª –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π JSON ‚ùå")
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å: {type(e).__name__}")
    finally:
        try: os.remove(path)
        except Exception: pass

# ========= RESET (–ê–î–ú–ò–ù) =========
async def cmd_reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not await _ensure_admin(update, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é üö´")
        return
    chat_id = update.effective_chat.id
    _ensure_chat(chat_id)
    async with STATE_LOCK:
        _clear_chat(chat_id)
        await cloud_save()
    await update.message.reply_text("üîÑ –ò—Å—Ç–æ—Ä–∏—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –∞–¥–º–∏–Ω–æ–º. –í—Å—ë –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ!")

async def cmd_resetuser(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update):
        if not await _guard_private_access(update, context):
            return
    if not await _ensure_admin(update, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üö´")
        return
    if not update.message:
        return
    chat_id = update.effective_chat.id
    _ensure_chat(chat_id)

    target_id: Optional[int] = None
    target_name: Optional[str] = None
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        u = update.message.reply_to_message.from_user
        target_id = u.id
        target_name = _display_name(u)
        await _remember_user(u)
    else:
        parts = (update.message.text or "").split()
        if len(parts) >= 2 and parts[1].startswith("@"):
            uid = KNOWN.get(parts[1][1:].lower())
            if uid:
                target_id = uid
                target_name = parts[1]

    if target_id is None:
        await update.message.reply_text("–£–∫–∞–∂–∏ –∫–æ–≥–æ —á–∏—Å—Ç–∏–º: –æ—Ç–≤–µ—Ç—å –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ `/resetuser @username`", parse_mode="Markdown")
        return

    async with STATE_LOCK:
        _clear_user_in_chat(chat_id, target_id)
        await cloud_save()
    await update.message.reply_text(f"üîÑ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_name or _name_or_id(target_id)} –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º.")

# ========= ALLOWLIST (–¢–û–õ–¨–ö–û OWNER) =========
async def cmd_allowchat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    chat_id = update.effective_chat.id
    if update.effective_chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å.")
        return
    _ensure_chat(chat_id)
    ALLOW_CHATS.add(chat_id)
    CHAT_TITLES[chat_id] = update.effective_chat.title or str(chat_id)
    async with STATE_LOCK:
        await cloud_save()
    await update.message.reply_text("‚úÖ –ß–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö. –ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")

async def cmd_denychat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        return
    chat_id = update.effective_chat.id
    if update.effective_chat.type not in ("group", "supergroup"):
        await update.message.reply_text("–≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–µ, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–ø—Ä–µ—Ç–∏—Ç—å.")
        return
    if chat_id in ALLOW_CHATS:
        ALLOW_CHATS.discard(chat_id)
    async with STATE_LOCK:
        _clear_chat(chat_id)
        TRIGGERS_CFG.pop(chat_id, None)
        TRIGGERS_COMPILED.pop(chat_id, None)
        CHAT_TITLES.pop(chat_id, None)
        await cloud_save()
    await update.message.reply_text("‚ùå –ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω. –í—ã—Ö–æ–¥–∏–º‚Ä¶")
    try:
        await context.bot.leave_chat(chat_id)
    except Exception:
        pass

async def cmd_listchats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if _is_private(update) and update.effective_user.id != OWNER_ID:
        return
    if update.effective_user.id != OWNER_ID:
        return
    if not ALLOW_CHATS:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø—É—Å—Ç.")
        return
    lines = []
    for cid in sorted(ALLOW_CHATS):
        title = CHAT_TITLES.get(cid, str(cid))
        lines.append(f"‚Ä¢ {title} ‚Äî `{cid}`")
    await update.message.reply_text("–†–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —á–∞—Ç—ã:\n" + "\n".join(lines), parse_mode="Markdown")

# ========= –ê–î–ú–ò–ù-–ú–ï–ù–Æ / –î–ú =========
async def cmd_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –≤ –≥—Ä—É–ø–ø–µ ‚Äî —Å–æ–æ–±—â–∞–µ—Ç –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –õ–°; –≤ –õ–° ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""
    if update.effective_chat.type in ("group","supergroup"):
        if not await _ensure_admin(update, context):
            await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–º–µ–Ω—é üö´")
            return
        # –ó–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â–∏–π "—Ü–µ–ª–µ–≤–æ–π" —á–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞ (—Å–µ—Å—Å–∏—è –ø–æ uid)
        uid = update.effective_user.id
        ADMIN_SESS[uid] = {"chat_id": update.effective_chat.id, "step": None, "new_trigger": None}
        try:
            await context.bot.send_message(uid, f"üîß –ê–¥–º–∏–Ω-–º–µ–Ω—é –¥–ª—è —á–∞—Ç–∞: {CHAT_TITLES.get(update.effective_chat.id, update.effective_chat.id)}\n\n{ADMIN_MENU_TEXT}")
        except Exception:
            await update.message.reply_text("–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ –õ–° —Å–Ω–∞—á–∞–ª–∞: –æ—Ç–∫—Ä–æ–π –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º –∏ –æ—Ç–ø—Ä–∞–≤—å /start.")
            return
        await update.message.reply_text("–û—Ç–∫—Ä—ã–ª –∞–¥–º–∏–Ω-–º–µ–Ω—é –≤ –õ–°. –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî –Ω–∞–ø–∏—à–∏ –±–æ—Ç—É –≤ –ª–∏—á–∫—É /start.")
    else:
        # –õ–°
        uid = update.effective_user.id
        sess = ADMIN_SESS.get(uid)
        if not sess or "chat_id" not in sess:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /admin –≤ –Ω—É–∂–Ω–æ–º –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, —á–µ–º —É–ø—Ä–∞–≤–ª—è—Ç—å.")
            return
        await update.message.reply_text(ADMIN_MENU_TEXT)

def _get_admin_target_chat(user_id: int) -> Optional[int]:
    sess = ADMIN_SESS.get(user_id)
    return sess.get("chat_id") if sess else None

# ========= –¢–†–ò–ì–ì–ï–†–´: –°–ü–ò–°–û–ö/–¢–û–ì–ì–õ/–£–î–ê–õ–ï–ù–ò–ï =========
def _format_triggers_list(chat_id: int) -> str:
    _ensure_triggers_migrated(chat_id)
    items = TRIGGERS_CFG.get(chat_id) or []
    if not items:
        return "–°–ø–∏—Å–æ–∫ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ –ø—É—Å—Ç."
    lines = []
    for i, t in enumerate(items, start=1):
        status = "‚úÖ" if t.get("enabled", True) else "üö´"
        lines.append(f"{i}. {status} {t.get('name','(–±–µ–∑ –∏–º–µ–Ω–∏)')} ‚Äî –æ—Ç–≤–µ—Ç–æ–≤: {len(t.get('answers',[]))}")
    return "–¢—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞:\n" + "\n".join(lines)

async def cmd_triggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /admin –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–ù–µ –∑–Ω–∞—é, –¥–ª—è –∫–∞–∫–æ–≥–æ —á–∞—Ç–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å. –í—ã–∑–æ–≤–∏ /admin –≤ –≥—Ä—É–ø–ø–µ.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å —Ç—Ä–∏–≥–≥–µ—Ä–∞–º–∏.")
        return
    await update.message.reply_text(_format_triggers_list(chat_id))

async def cmd_triggers_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /admin –≤ —á–∞—Ç–µ.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /admin –≤ –≥—Ä—É–ø–ø–µ.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    try:
        idx = int(context.args[0]) - 1
    except Exception:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä: /triggers_toggle 2")
        return
    items = TRIGGERS_CFG.get(chat_id) or []
    if not (0 <= idx < len(items)):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    items[idx]["enabled"] = not items[idx].get("enabled", True)
    _build_compiled_triggers_for_chat(chat_id)
    async with STATE_LOCK:
        await cloud_save()
    st = "–≤–∫–ª—é—á—ë–Ω" if items[idx]["enabled"] else "–≤—ã–∫–ª—é—á–µ–Ω"
    await update.message.reply_text(f"–¢—Ä–∏–≥–≥–µ—Ä ¬´{items[idx].get('name','')}¬ª {st}.")

async def cmd_triggers_del(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /admin –≤ —á–∞—Ç–µ.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /admin –≤ –≥—Ä—É–ø–ø–µ.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    try:
        idx = int(context.args[0]) - 1
    except Exception:
        await update.message.reply_text("–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä: /triggers_del 3")
        return
    items = TRIGGERS_CFG.get(chat_id) or []
    if not (0 <= idx < len(items)):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä.")
        return
    name = items[idx].get("name","")
    del items[idx]
    _build_compiled_triggers_for_chat(chat_id)
    async with STATE_LOCK:
        await cloud_save()
    await update.message.reply_text(f"–¢—Ä–∏–≥–≥–µ—Ä ¬´{name}¬ª —É–¥–∞–ª—ë–Ω.")

# ========= –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–†–ò–ì–ì–ï–†–ê ‚Äî –ú–ê–°–¢–ï–† –í –õ–° =========
def _reset_admin_wizard(uid: int):
    ADMIN_SESS[uid] = {"chat_id": ADMIN_SESS.get(uid, {}).get("chat_id"), "step": None, "new_trigger": None}

async def cmd_triggers_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /admin –≤ –Ω—É–∂–Ω–æ–º —á–∞—Ç–µ.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–ù–µ –∑–Ω–∞—é, –¥–ª—è –∫–∞–∫–æ–≥–æ —á–∞—Ç–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å. –í—ã–∑–æ–≤–∏ /admin –≤ –≥—Ä—É–ø–ø–µ.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    # —Å—Ç–∞—Ä—Ç –º–∞—Å—Ç–µ—Ä–∞
    ADMIN_SESS[uid] = {
        "chat_id": chat_id,
        "step": "type",
        "new_trigger": {"id": f"custom_{int(datetime.now().timestamp())}", "name": "–ù–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä",
                        "pattern": "", "is_regex": False, "ignore_case": True,
                        "word_boundaries": False, "answers": [], "enabled": True}
    }
    await update.message.reply_text(
        "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞:\n"
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø:\n"
        "1 ‚Äî –ü—Ä–æ—Å—Ç–∞—è —Ñ—Ä–∞–∑–∞\n"
        "2 ‚Äî –†–µ–≥—ç–∫—Å–ø\n"
        "(–æ—Ç–≤–µ—Ç—å —Ü–∏—Ñ—Ä–æ–π 1 –∏–ª–∏ 2)"
    )

async def _admin_dm_message_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–≥–∏ –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ –≤ –õ–°."""
    if not _is_private(update):
        return
    uid = update.effective_user.id
    sess = ADMIN_SESS.get(uid)
    if not sess or not sess.get("step"):
        return
    txt = (update.message.text or "").strip()
    chat_id = sess.get("chat_id")
    if not chat_id:
        _reset_admin_wizard(uid)
        await update.message.reply_text("–ù–µ –∑–Ω–∞—é, –¥–ª—è –∫–∞–∫–æ–≥–æ —á–∞—Ç–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å. –í—ã–∑–æ–≤–∏ /admin –≤ –≥—Ä—É–ø–ø–µ.")
        return

    step = sess["step"]
    new_tr = sess["new_trigger"]

    # –®–∞–≥ 1: —Ç–∏–ø
    if step == "type":
        if txt not in ("1","2"):
            await update.message.reply_text("–û—Ç–≤–µ—Ç—å —Ü–∏—Ñ—Ä–æ–π 1 (—Ñ—Ä–∞–∑–∞) –∏–ª–∏ 2 (—Ä–µ–≥—ç–∫—Å–ø).")
            return
        new_tr["is_regex"] = (txt == "2")
        sess["step"] = "name"
        await update.message.reply_text("–í–≤–µ–¥–∏ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –∏–º—è —Ç—Ä–∏–≥–≥–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ú—É–∑—ã–∫–∞¬ª):")
        return

    # –®–∞–≥ 2: –∏–º—è
    if step == "name":
        if len(txt) < 2 or len(txt) > 50:
            await update.message.reply_text("–ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ/–¥–ª–∏–Ω–Ω–æ–µ. –í–≤–µ–¥–∏ –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        new_tr["name"] = txt
        sess["step"] = "pattern"
        prompt = "–í–≤–µ–¥–∏ REGEXP-–ø–∞—Ç—Ç–µ—Ä–Ω:" if new_tr["is_regex"] else "–í–≤–µ–¥–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        await update.message.reply_text(prompt)
        return

    # –®–∞–≥ 3: –ø–∞—Ç—Ç–µ—Ä–Ω/—Ñ—Ä–∞–∑–∞
    if step == "pattern":
        if len(txt) < 1 or len(txt) > 100:
            await update.message.reply_text("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ/–¥–ª–∏–Ω–Ω–æ. –í–≤–µ–¥–∏ –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        if new_tr["is_regex"]:
            try:
                re.compile(txt, re.IGNORECASE if new_tr["ignore_case"] else 0)
            except Exception as e:
                await update.message.reply_text(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–≥—ç–∫—Å–ø: {e.__class__.__name__}")
                return
            new_tr["pattern"] = txt
        else:
            new_tr["pattern"] = txt
        sess["step"] = "options"
        await update.message.reply_text(
            "–û–ø—Ü–∏–∏ (–≤–≤–µ–¥–∏ —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥, –ª–∏–±–æ 0 —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):\n"
            "1 ‚Äî –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –í–ö–õ)\n"
            "2 ‚Äî –¢–æ–ª—å–∫–æ —Ü–µ–ª–æ–µ —Å–ª–æ–≤–æ (–≥—Ä–∞–Ω–∏—Ü—ã —Å–ª–æ–≤–∞) ‚Äî —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π —Ñ—Ä–∞–∑—ã\n"
            "–ü—Ä–∏–º–µ—Ä: 12 ‚Äî –≤–∫–ª—é—á–∏—Ç –æ–±–µ –æ–ø—Ü–∏–∏; 0 ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
        )
        return

    # –®–∞–≥ 4: –æ–ø—Ü–∏–∏
    if step == "options":
        flags = set(txt.strip())
        if flags and flags != {"0"}:
            new_tr["ignore_case"] = ("1" in flags)
            if not new_tr["is_regex"]:
                new_tr["word_boundaries"] = ("2" in flags)
        sess["step"] = "answers"
        new_tr["answers"] = []
        await update.message.reply_text(
            "–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ 1‚Äì3 –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∂–¥—ã–π –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–ø–∏—à–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª."
        )
        return

    # –®–∞–≥ 5: –æ—Ç–≤–µ—Ç—ã
    if step == "answers":
        if txt.lower() in ("–≥–æ—Ç–æ–≤–æ","–≥–æ—Ç–æ–≤–æ.","–≥–æ—Ç–æ–≤–æ!","done","finish"):
            if not new_tr["answers"]:
                await update.message.reply_text("–ù—É–∂–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –æ—Ç–≤–µ—Ç. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞.")
                return
            # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
            TRIGGERS_CFG.setdefault(chat_id, [])
            TRIGGERS_CFG[chat_id].append(TriggerCfg(dict(new_tr)))
            _build_compiled_triggers_for_chat(chat_id)
            async with STATE_LOCK:
                await cloud_save()
            await update.message.reply_text(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä ¬´{new_tr['name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω.\n\n" + _format_triggers_list(chat_id))
            _reset_admin_wizard(uid)
            return
        # –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        if len(txt) > 140:
            await update.message.reply_text("–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å 140 —Å–∏–º–≤–æ–ª–æ–≤). –ü—Ä–∏—à–ª–∏ –∫–æ—Ä–æ—á–µ.")
            return
        new_tr["answers"].append(txt)
        if len(new_tr["answers"]) >= 3:
            TRIGGERS_CFG.setdefault(chat_id, [])
            TRIGGERS_CFG[chat_id].append(TriggerCfg(dict(new_tr)))
            _build_compiled_triggers_for_chat(chat_id)
            async with STATE_LOCK:
                await cloud_save()
            await update.message.reply_text(f"‚úÖ –¢—Ä–∏–≥–≥–µ—Ä ¬´{new_tr['name']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω (3 –æ—Ç–≤–µ—Ç–∞).\n\n" + _format_triggers_list(chat_id))
            _reset_admin_wizard(uid)
            return
        await update.message.reply_text(f"–û—Ç–≤–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω ({len(new_tr['answers'])}). –ü—Ä–∏—à–ª–∏ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª.")
        return

# ========= –°–ë–†–û–° –¢–†–ò–ì–ì–ï–†–û–í –ö –î–ï–§–û–õ–¢–£ =========
async def cmd_resettriggers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω, —Ç–æ–ª—å–∫–æ –≤ –õ–° —á–µ—Ä–µ–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
    if not _is_private(update):
        await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°. –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ /admin –≤ —á–∞—Ç–µ.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /admin –≤ –≥—Ä—É–ø–ø–µ ‚Äî –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    TRIGGERS_CFG[chat_id] = [TriggerCfg(dict(t)) for t in DEFAULT_TRIGGERS]
    _build_compiled_triggers_for_chat(chat_id)
    async with STATE_LOCK:
        await cloud_save()
    await update.message.reply_text("üîÑ –¢—Ä–∏–≥–≥–µ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º.\n\n" + _format_triggers_list(chat_id))
    try:
        await context.bot.send_message(chat_id, "‚ÑπÔ∏è –ê–¥–º–∏–Ω —Å–±—Ä–æ—Å–∏–ª —Ç—Ä–∏–≥–≥–µ—Ä—ã —á–∞—Ç–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º.")
    except Exception:
        pass

# ========= TESTTRIGGER / DIAG (–õ–° –∞–¥–º–∏–Ω–∞) =========
async def cmd_testtrigger(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /admin –≤ –≥—Ä—É–ø–ø–µ ‚Äî –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    sample = " ".join(context.args).strip()
    if not sample:
        await update.message.reply_text("–ü—Ä–∏–º–µ—Ä: /testtrigger —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return
    _ensure_triggers_migrated(chat_id)
    compiled = TRIGGERS_COMPILED.get(chat_id, [])
    hits = []
    for idx, (pat, answers, name, enabled) in enumerate(compiled):
        if enabled and pat and pat.search(sample):
            # –∫–∞–∫–æ–π –æ—Ç–≤–µ—Ç –±—ã –≤—ã–¥–∞–ª
            ans = answers[0] if answers else "(–Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤)"
            hits.append(f"‚Ä¢ {name} ‚Üí ¬´{ans}¬ª")
    if not hits:
        await update.message.reply_text("–ù–∏ –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª.")
    else:
        await update.message.reply_text("–°—Ä–∞–±–æ—Ç–∞–ª–∏ –±—ã:\n" + "\n".join(hits))

_start_time = datetime.now(UTC)
_last_keepalive_ok = None
_last_save_time = None

async def cmd_diag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_private(update):
        await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –õ–°.")
        return
    uid = update.effective_user.id
    chat_id = _get_admin_target_chat(uid)
    if not chat_id:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ /admin –≤ –≥—Ä—É–ø–ø–µ ‚Äî –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç.")
        return
    if not await _is_admin(chat_id, uid, context):
        await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    # –æ—Ü–µ–Ω–∏–º —Ä–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    try:
        st_text = json.dumps(_serialize_state(), ensure_ascii=False)
        kb = len(st_text.encode("utf-8")) // 1024
    except Exception:
        kb = -1
    uptime = datetime.now(UTC) - _start_time
    lines = [
        f"–ß–∞—Ç: {CHAT_TITLES.get(chat_id, chat_id)}",
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤: {sum(1 for t in (TRIGGERS_CFG.get(chat_id) or []) if t.get('enabled', True))} / {len(TRIGGERS_CFG.get(chat_id) or [])}",
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–≤—Ç–æ—Å–µ–π–≤: {_last_save_time.isoformat() if _last_save_time else '‚Äî'}",
        f"–†–∞–∑–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è: ~{kb} KB",
        f"Uptime –ø—Ä–æ—Ü–µ—Å—Å–∞: {uptime}",
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π keepalive: {_last_keepalive_ok if _last_keepalive_ok is not None else '‚Äî'}",
    ]
    await update.message.reply_text("üõ† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:\n" + "\n".join(lines))

# ========= HEALTH JOBS =========
async def periodic_save_job(context: ContextTypes.DEFAULT_TYPE):
    global _last_save_time
    async with STATE_LOCK:
        await cloud_save()
        _last_save_time = datetime.now(UTC)

async def keepalive_job(context: ContextTypes.DEFAULT_TYPE):
    global _last_keepalive_ok
    if not SELF_URL:
        return
    try:
        async with httpx.AsyncClient(timeout=8.0) as client:
            r = await client.get(SELF_URL)
            _last_keepalive_ok = (r.status_code, r.text[:50])
    except Exception as e:
        _last_keepalive_ok = f"error: {e.__class__.__name__}"

# ========= –ü–û–î–ü–ò–°–ö–ò –ù–ê –°–û–ë–´–¢–ò–Ø –ß–õ–ï–ù–°–¢–í–ê (–∞–≤—Ç–æ-–≤—ã—Ö–æ–¥) =========
from telegram.ext import ChatMemberHandler

async def on_my_chat_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï—Å–ª–∏ –±–æ—Ç–∞ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–π —á–∞—Ç ‚Äî –º—è–≥–∫–æ –≤—ã—Ö–æ–¥–∏–º."""
    mc = update.my_chat_member
    if not mc or not mc.chat:
        return
    chat = mc.chat
    # –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç–∞—Ç—É—Å "member"/"administrator" –∏–∑ "kicked"/"left"
    new_status = mc.new_chat_member.status if mc.new_chat_member else None
    if chat.type in ("group","supergroup") and new_status in ("member","administrator"):
        if not _allowed_chat(chat.id):
            try:
                await context.bot.send_message(chat.id, "üö´ –≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞.")
            except Exception:
                pass
            try:
                await context.bot.leave_chat(chat.id)
            except Exception:
                pass

# ========= ENTRY =========
async def _pre_init(app: Application):
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass
    await cloud_load_if_any()

def main():
    # Flask
    threading.Thread(target=run_flask, daemon=True).start()

    req = HTTPXRequest(connect_timeout=8.0, read_timeout=20.0, pool_timeout=5.0)
    application: Application = (
        ApplicationBuilder()
        .token(API_TOKEN)
        .get_updates_request(req)
        .post_init(_pre_init)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –≤—Å–µ—Ö
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help",  cmd_help))
    application.add_handler(CommandHandler("nick",  cmd_nick))
    application.add_handler(CommandHandler("8ball", cmd_8ball))

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    application.add_handler(CallbackQueryHandler(on_button))

    # –≠–∫—Å–ø–æ—Ä—Ç/–∏–º–ø–æ—Ä—Ç
    application.add_handler(CommandHandler("export", cmd_export))
    application.add_handler(CommandHandler("export_here", cmd_export_here))
    application.add_handler(CommandHandler("import", cmd_import))

    # –°–±—Ä–æ—Å—ã
    application.add_handler(CommandHandler("reset", cmd_reset))
    application.add_handler(CommandHandler("resetuser", cmd_resetuser))

    # Allowlist (—Ç–æ–ª—å–∫–æ OWNER)
    application.add_handler(CommandHandler("allowchat", cmd_allowchat))
    application.add_handler(CommandHandler("denychat", cmd_denychat))
    application.add_handler(CommandHandler("listchats", cmd_listchats))

    # –ê–¥–º–∏–Ω-–º–µ–Ω—é –∏ —Ç—Ä–∏–≥–≥–µ—Ä—ã (–≤ –õ–°)
    application.add_handler(CommandHandler("admin", cmd_admin))
    application.add_handler(CommandHandler("triggers", cmd_triggers))
    application.add_handler(CommandHandler("triggers_toggle", cmd_triggers_toggle))
    application.add_handler(CommandHandler("triggers_del", cmd_triggers_del))
    application.add_handler(CommandHandler("triggers_add", cmd_triggers_add))
    application.add_handler(CommandHandler("resettriggers", cmd_resettriggers))
    application.add_handler(CommandHandler("testtrigger", cmd_testtrigger))
    application.add_handler(CommandHandler("diag", cmd_diag))

    # DM-–º–∞—Å—Ç–µ—Ä (–ø–æ—Å–ª–µ /triggers_add)
    application.add_handler(MessageHandler(filters.TEXT & filters.ChatType.PRIVATE, _admin_dm_message_router))

    # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ (–Ω–µ –∫–æ–º–∞–Ω–¥) ‚Äî –≥—Ä—É–ø–ø—ã
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    # –ê–≤—Ç–æ-–≤—ã—Ö–æ–¥ –∏–∑ –Ω–µ—Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
    application.add_handler(ChatMemberHandler(on_my_chat_member, ChatMemberHandler.MY_CHAT_MEMBER))

    # JobQueue: –∞–≤—Ç–æ—Å–µ–π–≤ –∏ keep-alive
    jq = application.job_queue
    if jq is not None:
        jq.run_repeating(periodic_save_job, interval=300, first=120)   # –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω
        jq.run_repeating(keepalive_job,     interval=240, first=60)    # –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω

    from telegram import Update as TgUpdate
    application.run_polling(
        allowed_updates=TgUpdate.ALL_TYPES,
        timeout=20,
        poll_interval=1.0,
        drop_pending_updates=True,
        close_loop=False,
    )

if __name__ == "__main__":
    main()
