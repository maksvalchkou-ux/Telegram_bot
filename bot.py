import os
import threading
from flask import Flask

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∞–º–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ üî•\n\n"
    "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é, –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞—á–∏–≤–∫–∏."
)

HELP_TEXT = (
    "üõ† –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç (v1 ‚Äî –∫–∞—Ä–∫–∞—Å):\n"
    "‚Ä¢ /start ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
    "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç¬ª ‚Äî —ç—Ç–∞ –ø–∞–º—è—Ç–∫–∞\n"
    "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)\n"
    "‚Ä¢ –ö–Ω–æ–ø–∫–∞ ¬´–ê—á–∏–≤–∫–∏¬ª ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)\n\n"
    "‚öôÔ∏è –í —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö –ø–æ—è–≤—è—Ç—Å—è:\n"
    "‚Ä¢ –ù–∏–∫–Ω–µ–π–º—ã (/nick –∏ /nick @user) —Å –∞–Ω—Ç–∏—Å–ø–∞–º–æ–º –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ–º –ø–æ –∞–¥–º–∏–Ω–∞–º\n"
    "‚Ä¢ –†–µ–ø—É—Ç–∞—Ü–∏—è (+1/-1) —Å –∞–Ω—Ç–∏—á–∏—Ç–æ–º\n"
    "‚Ä¢ –ú–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä (/8ball) —Å –±–æ–ª—å—à–∏–º –ø—É–ª–æ–º –æ—Ç–≤–µ—Ç–æ–≤\n"
    "‚Ä¢ –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–ª–æ–≤–∞ (—Ç—Ä–∏–≥–≥–µ—Ä—ã)\n"
    "‚Ä¢ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞—á–∏–≤–∫–∏\n"
)

STATS_PLACEHOLDER = (
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "‚Ä¢ –¢–æ–ø —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è/—Å–∏–º–≤–æ–ª—ã: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –ê—á–∏–≤–∫–∏: —Å–∫–æ—Ä–æ\n\n"
    "–ü—Ä–æ–∫–∞—á–∞–µ–º —ç—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö üòâ"
)

ACHIEVEMENTS_PLACEHOLDER = (
    "üèÖ –°–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "–ú—ã –≥–æ—Ç–æ–≤–∏–º –≤–∫—É—Å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å –ø–µ—Ä—á–∏–Ω–∫–æ–π üòà\n"
    "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è."
)

# ========= –ö–ù–û–ü–ö–ò =========
BTN_HELP = "help_info"
BTN_STATS = "stats_open"
BTN_ACH = "ach_list"


def main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("üß∞ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", callback_data=BTN_HELP),
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=BTN_STATS),
            InlineKeyboardButton("üèÖ –ê—á–∏–≤–∫–∏", callback_data=BTN_ACH),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)


# ========= –•–≠–ù–î–õ–ï–†–´ =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    data = q.data if q else ""
    if not q:
        return
    await q.answer()

    if data == BTN_HELP:
        await q.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())
    elif data == BTN_STATS:
        await q.message.reply_text(STATS_PLACEHOLDER, reply_markup=main_keyboard())
    elif data == BTN_ACH:
        await q.message.reply_text(ACHIEVEMENTS_PLACEHOLDER, reply_markup=main_keyboard())
    else:
        await q.message.reply_text("¬Ø\\_(„ÉÑ)_/¬Ø –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=main_keyboard())


# ========= FLASK –¥–ª—è Render (healthcheck) =========
app = Flask(__name__)

@app.get("/")
def health():
    return "Bot is running!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)


# ========= ENTRY =========
def main():
    threading.Thread(target=run_flask, daemon=True).start()
    application = Application.builder().token(API_TOKEN).build()
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CallbackQueryHandler(on_button))
    application.run_polling(close_loop=False)


if __name__ == "__main__":
    main()
