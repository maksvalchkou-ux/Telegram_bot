import os
import re
import random
import threading
import html
from datetime import datetime, timedelta, timezone
from typing import Dict, Optional, Set, Tuple, List

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters
)
from telegram.request import HTTPXRequest

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# –ö—É–ª–¥–∞—É–Ω –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–∏–∫–Ω–µ–π–º–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º (–¥–ª—è —Ç–µ—Å—Ç–∞ 10 —Å–µ–∫; –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –Ω–∞ —á–∞—Å)
NICK_COOLDOWN = timedelta(seconds=10)
TRIGGER_COOLDOWN = timedelta(seconds=20)
REP_DAILY_LIMIT = 10
REP_WINDOW = timedelta(hours=24)
UTC = timezone.utc

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∞–º–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ üî•\n\n"
    "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ ‚Äî —Ç–∞–º –ø–∞–º—è—Ç–∫–∞, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∞—á–∏–≤–∫–∏."
)
HELP_TEXT = (
    "üõ† –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç:\n"
    "‚Ä¢ /start ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é\n"
    "‚Ä¢ /nick ‚Äî –Ω–∏–∫ —Å–µ–±–µ; /nick @user –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º ‚Äî –Ω–∏–∫ –¥—Ä—É–≥—É\n"
    "‚Ä¢ /8ball –≤–æ–ø—Ä–æ—Å ‚Äî –º–∞–≥–∏—á–µ—Å–∫–∏–π —à–∞—Ä –æ—Ç–≤–µ—á–∞–µ—Ç\n"
    "‚Ä¢ +1 / -1 ‚Äî —Ä–µ–ø—É—Ç–∞—Ü–∏—è –ø–æ —Ä–µ–ø–ª–∞—é –∏–ª–∏ —Å @username\n"
    "‚Ä¢ ¬´üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª ‚Äî —Ç–æ–ø —Ä–µ–ø—ã, —Ç–µ–∫—É—â–∏–µ –Ω–∏–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n"
    "‚Ä¢ ¬´üèÖ –ê—á–∏–≤–∫–∏¬ª ‚Äî —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
)
STATS_TITLE = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"

# ========= –ö–ù–û–ü–ö–ò =========
BTN_HELP  = "help_info"
BTN_STATS = "stats_open"
BTN_ACH   = "ach_list"

def main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üß∞ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", callback_data=BTN_HELP)],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=BTN_STATS),
            InlineKeyboardButton("üèÖ –ê—á–∏–≤–∫–∏",    callback_data=BTN_ACH),
        ],
    ])

# ========= –ü–ê–ú–Ø–¢–¨ =========
NICKS: Dict[int, Dict[int, str]] = {}
TAKEN: Dict[int, Set[str]] = {}
LAST_NICK: Dict[int, datetime] = {}
KNOWN: Dict[str, int] = {}
NAMES: Dict[int, str] = {}
LAST_TRIGGER_TIME: Dict[int, datetime] = {}
REP_GIVEN: Dict[int, int] = {}
REP_RECEIVED: Dict[int, int] = {}
REP_POS_GIVEN: Dict[int, int] = {}
REP_NEG_GIVEN: Dict[int, int] = {}
REP_GIVE_TIMES: Dict[int, List[datetime]] = {}
MSG_COUNT: Dict[int, int] = {}
CHAR_COUNT: Dict[int, int] = {}
NICK_CHANGE_COUNT: Dict[int, int] = {}
EIGHTBALL_COUNT: Dict[int, int] = {}
TRIGGER_HITS: Dict[int, int] = {}
BEER_HITS: Dict[int, int] = {}
LAST_MSG_AT: Dict[int, datetime] = {}
ADMIN_PLUS_GIVEN: Dict[int, int] = {}
ADMIN_MINUS_GIVEN: Dict[int, int] = {}
ACHIEVEMENTS: Dict[int, Set[str]] = {}

def _achieve(user_id: int, title: str) -> bool:
    got = ACHIEVEMENTS.setdefault(user_id, set())
    if title in got:
        return False
    got.add(title)
    return True

# ========= –ê–ß–ò–í–ö–ò =========
ACH_LIST: Dict[str, Tuple[str, str]] = {
    "–ß–∏—Ç–µ—Ä —ë–±–∞–Ω—ã–π":         ("–ø–æ–ø—ã—Ç–∫–∞ –ø–æ—Å—Ç–∞–≤–∏—Ç—å +1 —Å–∞–º–æ–º—É —Å–µ–±–µ",         "–°–∞–º —Å–µ–±–µ +1 ‚Äî –Ω–µ–ª—å–∑—è."),
    "–ù–∏–∫–æ—Ñ–∏–ª –µ–±—É—á–∏–π":       ("5 —Å–º–µ–Ω –Ω–∏–∫–Ω–µ–π–º–∞",                           "–°–º–µ–Ω–∏–ª –Ω–∏–∫ ‚â• 5 —Ä–∞–∑."),
    "–ù–∏–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä":     ("10 —Å–º–µ–Ω –Ω–∏–∫–Ω–µ–π–º–∞",                          "–°–º–µ–Ω–∏–ª –Ω–∏–∫ ‚â• 10 —Ä–∞–∑."),
    "–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü":      ("—Ä–∞–∑–¥–∞–ª +10 —Ä–µ–ø—É—Ç–∞—Ü–∏–π",                      "–í—ã–¥–∞–Ω–æ +1 ‚â• 10 —Ä–∞–∑."),
    "–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫":    ("—Ä–∞–∑–¥–∞–ª –ª—é–±—É—é —Ä–µ–ø—É 20 —Ä–∞–∑",                  "–õ—é–±—ã—Ö –≤—ã–¥–∞—á (¬±1) ‚â• 20."),
    "–õ—é–±–∏–º—á–∏–∫, —Å—É–∫–∞":       ("–ø–æ–ª—É—á–∏–ª +20 —Ä–µ–ø—É—Ç–∞—Ü–∏–∏",                     "–ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–ø—ã ‚â• 20."),
    "–¢–æ–∫—Å–∏–∫-–º–∞–≥–Ω–∏—Ç":        ("—É—à—ë–ª –≤ –º–∏–Ω—É—Å –ø–æ —Ä–µ–ø–µ",                      "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø–∞ ‚â§ -10."),
    "–ü–∏–≤–Ω–æ–π —Å–æ–º–µ–ª—å–µ-–∞–ª–∫–∞—à": ("5 —Ä–∞–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∏–ª ¬´–ø–∏–≤–æ¬ª",                    "¬´–ü–∏–≤–æ¬ª-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚â• 5."),
    "–ü–∏–≤–æ–∑–∞–≤—Ä":             ("20 ¬´–ø–∏–≤–Ω—ã—Ö¬ª —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤",                     "¬´–ü–∏–≤–æ¬ª-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚â• 20."),
    "–®–∞—Ä–æ–º–∞–Ω –¥–æ–ª–±–∞–Ω–Ω—ã–π":    ("/8ball –≤—ã–∑–≤–∞–Ω 10 —Ä–∞–∑",                      "–í—ã–∑–æ–≤–æ–≤ /8ball ‚â• 10."),
    "–ö–ª–∞–≤–æ–¥—Ä–æ–±–∏–ª–∫–∞":        ("–Ω–∞—Å—Ç—Ä–æ—á–∏–ª 5000 —Å–∏–º–≤–æ–ª–æ–≤",                   "–°–∏–º–≤–æ–ª–æ–≤ ‚â• 5000."),
    "–ü–∏—Å–∞—Ä—å-–º–∞—Ö–æ–≤–∏–∫":       ("–Ω–∞–∫–∏–¥–∞–ª 100 —Å–æ–æ–±—â–µ–Ω–∏–π",                     "–°–æ–æ–±—â–µ–Ω–∏–π ‚â• 100."),
    "–¢—Ä–∏–≥–≥–µ—Ä-–º–µ–π–∫–µ—Ä":       ("15 —Ä–∞–∑ —Ç—Ä–∏–≥–≥–µ—Ä–∏–ª –±–æ—Ç–∞",                     "–õ—é–±—ã—Ö —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ‚â• 15."),
    "–¢—Ä–æ–Ω–æ–ª–æ–º":             ("–º–µ–Ω—è–ª –Ω–∏–∫ –∞–¥–º–∏–Ω–∞",                          "–°–º–µ–Ω–∏–ª –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é-–∞–¥–º–∏–Ω—É."),
    "–ü–æ–¥—Ö–∞–ª–∏–º –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π":("–ø–æ—Å—Ç–∞–≤–∏–ª +1 –∞–¥–º–∏–Ω—É 5 —Ä–∞–∑",                  "–í—ã–¥–∞–ª +1 –∞–¥–º–∏–Ω–∞–º ‚â• 5."),
    "–£–∂–∞–ª–∏–ª –∫–æ—Ä–æ–ª—è":        ("–≤–ª–µ–ø–∏–ª -1 –∞–¥–º–∏–Ω–∞–º 3 —Ä–∞–∑–∞",                  "–í—ã–¥–∞–ª -1 –∞–¥–º–∏–Ω–∞–º ‚â• 3."),
    "–ö—Ä—É—Ç–æ–π —á–µ–ª":           ("–Ω–∞–∫–æ–ø–∏–ª —Å–æ–ª–∏–¥–Ω—É—é —Ä–µ–ø—É",                     "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è ‚â• 50."),
    "–û–ø—É—â–µ–Ω–Ω—ã–π":            ("–æ–ø—É—Å—Ç–∏–ª—Å—è –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–∏–∂–µ –ø–ª–∏–Ω—Ç—É—Å–∞",      "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è ‚â§ -20."),
    "–ü–æ—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ–≤": ("–ø—Ä–æ–ø–∞–¥–∞–ª 5 –¥–Ω–µ–π",                           "–ü–µ—Ä–µ—Ä—ã–≤ ‚â• 5 –¥–Ω–µ–π."),
    "–°–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ ***":     ("–ø—Ä–æ–ø–∞–¥–∞–ª 3 –¥–Ω—è",                            "–ü–µ—Ä–µ—Ä—ã–≤ ‚â• 3 –¥–Ω—è."),
    "–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç":       ("—à—É—Ç–∏—Ç –Ω–∏–∂–µ –ø–æ—è—Å–∞",                          "NSFW-—Å–ª–æ–≤–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö."),
    "–ö–æ—Ä–æ–ª—å —Ä–µ–ø—ã":          ("—Ä–µ–ø—É—Ç–∞—Ü–∏—è –∫–∞–∫ —É –±–æ–≥–∞",                      "–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è ‚â• 100."),
    "–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫":     ("—Ä–∞–∑–¥–∞–ª -1 –¥–µ—Å—è—Ç—å —Ä–∞–∑",                      "–í—ã–¥–∞–Ω–æ -1 ‚â• 10."),
    "–§–ª—É–¥–µ—Ä–∞—Å—Ç":            ("—Å–ø–∞–º–∏–ª –∫–∞–∫ —à–∞–º–∞–Ω",                          "–°–æ–æ–±—â–µ–Ω–∏–π ‚â• 300."),
    "–°–ª–æ–≤–µ—Å–Ω—ã–π –ø–æ–Ω–æ—Å":      ("—Ä–∞–∑–ª–∏–ª –æ–∫–µ–∞–Ω —Ç–µ–∫—Å—Ç–∞",                       "–°–∏–º–≤–æ–ª–æ–≤ ‚â• 20000."),
    "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ—á–µ—Ä —à–∞—Ä–∞":("–ø–æ–¥—Å–µ–ª –Ω–∞ 8ball",                           "–í—ã–∑–æ–≤–æ–≤ /8ball ‚â• 30."),
}

# ========= HTML-SAFE =========
MAX_LEN = 3500

async def send_html_safely(context: ContextTypes.DEFAULT_TYPE, chat_id: int, html_text: str):
    chunks = []
    s = html_text
    while len(s) > MAX_LEN:
        cut = s.rfind("<br/>", 0, MAX_LEN)
        if cut == -1:
            cut = s.rfind("\n", 0, MAX_LEN)
        if cut == -1:
            cut = MAX_LEN
        chunks.append(s[:cut])
        s = s[cut:]
    if s:
        chunks.append(s)

    for part in chunks:
        try:
            await context.bot.send_message(chat_id, part, parse_mode="HTML")
        except Exception:
            await context.bot.send_message(chat_id, re.sub(r"<br\s*/?>", "\n", part))

def build_achievements_catalog() -> str:
    lines = ["üèÖ –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞—á–∏–≤–æ–∫:<br/>"]
    for title, (desc, cond) in ACH_LIST.items():
        lines.append(f"‚Ä¢ <b>{html.escape(title)}</b> ‚Äî {html.escape(desc)} (—É—Å–ª–æ–≤–∏–µ: {html.escape(cond)})")
    return "<br/>".join(lines)
# ========= –ö–û–ú–ê–ù–î–´ =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())

async def cmd_ach(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await send_html_safely(context, update.effective_chat.id, build_achievements_catalog())

# –ö–Ω–æ–ø–∫–∏
async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer("–°–µ–∫—É–Ω–¥—É‚Ä¶", show_alert=False)
    data = q.data
    if data == BTN_HELP:
        await q.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())
    elif data == BTN_STATS:
        await q.message.reply_text(build_stats_text(update.effective_chat.id), reply_markup=main_keyboard())
    elif data == BTN_ACH:
        try:
            await send_html_safely(context, update.effective_chat.id, build_achievements_catalog())
        except Exception:
            await q.message.reply_text("üèÖ –°–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∫–æ–º–∞–Ω–¥—É /ach", reply_markup=main_keyboard())
    else:
        await q.message.reply_text("¬Ø\\_(„ÉÑ)_/¬Ø –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=main_keyboard())

# ---- /nick ----
NICK_COOLDOWN = NICK_COOLDOWN  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, —É–∂–µ –∑–∞–¥–∞–Ω–æ –≤—ã—à–µ

def _ensure_chat(chat_id: int):
    if chat_id not in NICKS:
        NICKS[chat_id] = {}
    if chat_id not in TAKEN:
        TAKEN[chat_id] = set()

def _cooldown_text(uid: int) -> Optional[str]:
    now = datetime.now(UTC)
    last = LAST_NICK.get(uid)
    if last and now - last < NICK_COOLDOWN:
        left = int((last + NICK_COOLDOWN - now).total_seconds())
        return f"–ø–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{left} —Å–µ–∫."
    return None

def _mark_nick(uid: int):
    LAST_NICK[uid] = datetime.now(UTC)

def _inc(d: Dict[int, int], key: int, by: int = 1):
    d[key] = d.get(key, 0) + by

def _display_name(u: User) -> str:
    return f"@{u.username}" if u.username else (u.full_name or f"id{u.id}")

async def _remember_user(u: Optional[User]):
    if not u:
        return
    if u.username:
        KNOWN[u.username.lower()] = u.id
        NAMES[u.id] = f"@{u.username}"
    else:
        NAMES[u.id] = u.full_name or f"id{u.id}"

def _make_nick(chat_id: int, prev: Optional[str]) -> str:
    _ensure_chat(chat_id)
    taken = TAKEN[chat_id]
    for _ in range(80):
        parts = []
        parts.append(random.choice(SPICY) if random.random() < 0.25 else random.choice(ADJ))
        parts.append(random.choice(NOUN))
        if random.random() < 0.85:
            parts.append(random.choice(TAILS))
        nick = " ".join(parts)
        if random.random() < 0.7:
            nick += " " + random.choice(EMOJIS)
        if prev and nick == prev:
            continue
        if nick in taken:
            continue
        return nick
    return f"{random.choice(ADJ)} {random.choice(NOUN)} {random.choice(TAILS)}"

def _apply_nick(chat_id: int, user_id: int, new_nick: str):
    _ensure_chat(chat_id)
    prev = NICKS[chat_id].get(user_id)
    if prev:
        TAKEN[chat_id].discard(prev)
    NICKS[chat_id][user_id] = new_nick
    TAKEN[chat_id].add(new_nick)
    _inc(NICK_CHANGE_COUNT, user_id)

async def _is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        m = await context.bot.get_chat_member(chat_id, user_id)
        return m.status in ("administrator", "creator")
    except Exception:
        return False

async def cmd_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    await _remember_user(update.effective_user)

    chat_id = update.effective_chat.id
    initiator = update.effective_user

    cd = _cooldown_text(initiator.id)
    if cd:
        await update.message.reply_text(f"–ü–æ—Ç–µ—Ä–ø–∏, {cd}")
        return

    # —Ü–µ–ª—å: reply > @user > —Å–∞–º —Å–µ–±–µ
    target_user: Optional[User] = None
    if update.message.reply_to_message and update.message.reply_to_message.from_user:
        target_user = update.message.reply_to_message.from_user

    target_id: Optional[int] = None
    target_name: Optional[str] = None
    if target_user:
        target_id = target_user.id
        target_name = _display_name(target_user)
        await _remember_user(target_user)
    else:
        if update.message.text:
            parts = update.message.text.split()
            if len(parts) >= 2 and parts[1].startswith("@"):
                uid = KNOWN.get(parts[1][1:].lower())
                if uid:
                    target_id = uid
                    target_name = parts[1]

    if target_id is None:
        target_id = initiator.id
        target_name = _display_name(initiator)

    prev = NICKS.get(chat_id, {}).get(target_id)
    new_nick = _make_nick(chat_id, prev)
    _apply_nick(chat_id, target_id, new_nick)
    _mark_nick(initiator.id)

    # –∞—á–∏–≤–∫–∏ –∑–∞ –Ω–∏–∫–∏
    cnt = NICK_CHANGE_COUNT.get(target_id, 0)
    if cnt >= 5 and _achieve(target_id, "–ù–∏–∫–æ—Ñ–∏–ª –µ–±—É—á–∏–π"):
        await _announce_achievement(context, chat_id, target_id, "–ù–∏–∫–æ—Ñ–∏–ª –µ–±—É—á–∏–π")
    if cnt >= 10 and _achieve(target_id, "–ù–∏–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä"):
        await _announce_achievement(context, chat_id, target_id, "–ù–∏–∫-–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä")

    # –∞—á–∏–≤–∫–∞ –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∞–¥–º–∏–Ω–æ–º (–µ—Å–ª–∏ –º–µ–Ω—è–ª –Ω–∏–∫ –Ω–µ —Å–µ–±–µ)
    if target_id != initiator.id:
        if await _is_admin(chat_id, target_id, context):
            if _achieve(initiator.id, "–¢—Ä–æ–Ω–æ–ª–æ–º"):
                await _announce_achievement(context, chat_id, initiator.id, "–¢—Ä–æ–Ω–æ–ª–æ–º")

    if target_id == initiator.id:
        await update.message.reply_text(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫: ¬´{new_nick}¬ª")
    else:
        await update.message.reply_text(f"{target_name} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω(–∞) –∫–∞–∫ ¬´{new_nick}¬ª")

# ---- /8ball ----
EIGHT_BALL = [
    "–î–∞ ‚úÖ","–ù–µ—Ç ‚ùå","–í–æ–∑–º–æ–∂–Ω–æ ü§î","–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç","–°–ø—Ä–æ—Å–∏ –ø–æ–∑–∂–µ üïê","–°—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ üíØ",
    "–ï—Å—Ç—å —à–∞–Ω—Å, –Ω–æ –Ω–µ —Å–µ–≥–æ–¥–Ω—è","–ù–µ —Ä–∏—Å–∫—É–π","–õ—É—á—à–µ –ø—Ä–æ–º–æ–ª—á—É","–ó–≤—ë–∑–¥—ã –≥–æ–≤–æ—Ä—è—Ç ¬´–¥–∞¬ª ‚ú®",
    "–≠—Ç–æ —Å—É–¥—å–±–∞","–®–∞–Ω—Å—ã –º–∞–ª—ã","–¢–æ—á–Ω–æ –Ω–µ—Ç","–õ–µ–≥–µ–Ω–¥—ã —à–µ–ø—á—É—Ç ¬´–¥–∞¬ª","–ù–µ —Å–µ–π—á–∞—Å",
    "–ê–±—Å–æ–ª—é—Ç–Ω–æ","–ú-–¥–∞‚Ä¶ —Ç–∞–∫–æ–µ —Å–µ–±–µ","–û—Ç–≤–µ—Ç –≤–Ω—É—Ç—Ä–∏ —Ç–µ–±—è","–•–∞-—Ö–∞, –∫–æ–Ω–µ—á–Ω–æ!","–î–∞–∂–µ –Ω–µ –¥—É–º–∞–π"
]

async def cmd_8ball(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    uid = update.effective_user.id
    _inc(EIGHTBALL_COUNT, uid)
    if EIGHTBALL_COUNT.get(uid, 0) >= 10 and _achieve(uid, "–®–∞—Ä–æ–º–∞–Ω –¥–æ–ª–±–∞–Ω–Ω—ã–π"):
        await _announce_achievement(context, update.effective_chat.id, uid, "–®–∞—Ä–æ–º–∞–Ω –¥–æ–ª–±–∞–Ω–Ω—ã–π")
    if EIGHTBALL_COUNT.get(uid, 0) >= 30 and _achieve(uid, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ—á–µ—Ä —à–∞—Ä–∞"):
        await _announce_achievement(context, update.effective_chat.id, uid, "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –¥—Ä–æ—á–µ—Ä —à–∞—Ä–∞")

    q = " ".join(context.args).strip()
    if not q:
        await update.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å: `/8ball —Å—Ç–æ–∏—Ç –ª–∏ –∏–¥—Ç–∏ –∑–∞ –ø–∏–≤–æ–º?`", parse_mode="Markdown")
        return
    await update.message.reply_text(random.choice(EIGHT_BALL))

# ---- –ï–î–ò–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê: —Å—á—ë—Ç—á–∏–∫–∏ ‚Üí —Ä–µ–ø—É—Ç–∞—Ü–∏—è ‚Üí —Ç—Ä–∏–≥–≥–µ—Ä—ã/NSFW/AFK ----
REP_CMD = re.compile(r"^[\+\-]1(\b|$)", re.IGNORECASE)

def _trigger_allowed(chat_id: int) -> bool:
    now = datetime.now(UTC)
    last = LAST_TRIGGER_TIME.get(chat_id)
    if last and now - last < TRIGGER_COOLDOWN:
        return False
    LAST_TRIGGER_TIME[chat_id] = now
    return True

async def _announce_achievement(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int, title: str):
    name = NAMES.get(user_id, f"id{user_id}")
    desc = ACH_LIST.get(title, ("", ""))[0]
    try:
        await context.bot.send_message(
            chat_id,
            f"üèÖ {html.escape(name)} –ø–æ–ª—É—á–∞–µ—Ç –∞—á–∏–≤–∫—É: <b>{html.escape(title)}</b> ‚Äî {html.escape(desc)}",
            parse_mode="HTML"
        )
    except Exception:
        pass

async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or msg.from_user is None:
        return
    if msg.from_user.is_bot:
        return

    # –∑–∞–ø–æ–º–Ω–∏–º –∏–º—è/@username
    await _remember_user(msg.from_user)

    # === 0) AFK-–∞—á–∏–≤–∫–∏: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä—ã–≤ —Å –ø—Ä–æ—à–ª–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ===
    now = datetime.now(UTC)
    uid = msg.from_user.id
    if uid in LAST_MSG_AT:
        gap = now - LAST_MSG_AT[uid]
        if gap >= timedelta(days=5) and _achieve(uid, "–ü–æ—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ–≤"):
            await _announce_achievement(context, update.effective_chat.id, uid, "–ü–æ—à—ë–ª —Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ä–æ–≤")
        elif gap >= timedelta(days=3) and _achieve(uid, "–°–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ ***"):
            await _announce_achievement(context, update.effective_chat.id, uid, "–°–ø–æ—Ç–∫–Ω—É–ª—Å—è –æ ***")
    LAST_MSG_AT[uid] = now

    # === 1) –°—á—ë—Ç—á–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ===
    text = (msg.text or "")
    _inc(MSG_COUNT, uid)
    _inc(CHAR_COUNT, uid, by=len(text))
    if CHAR_COUNT.get(uid, 0) >= 5000 and _achieve(uid, "–ö–ª–∞–≤–æ–¥—Ä–æ–±–∏–ª–∫–∞"):
        await _announce_achievement(context, update.effective_chat.id, uid, "–ö–ª–∞–≤–æ–¥—Ä–æ–±–∏–ª–∫–∞")
    if CHAR_COUNT.get(uid, 0) >= 20000 and _achieve(uid, "–°–ª–æ–≤–µ—Å–Ω—ã–π –ø–æ–Ω–æ—Å"):
        await _announce_achievement(context, update.effective_chat.id, uid, "–°–ª–æ–≤–µ—Å–Ω—ã–π –ø–æ–Ω–æ—Å")
    if MSG_COUNT.get(uid, 0) >= 100 and _achieve(uid, "–ü–∏—Å–∞—Ä—å-–º–∞—Ö–æ–≤–∏–∫"):
        await _announce_achievement(context, update.effective_chat.id, uid, "–ü–∏—Å–∞—Ä—å-–º–∞—Ö–æ–≤–∏–∫")
    if MSG_COUNT.get(uid, 0) >= 300 and _achieve(uid, "–§–ª—É–¥–µ—Ä–∞—Å—Ç"):
        await _announce_achievement(context, update.effective_chat.id, uid, "–§–ª—É–¥–µ—Ä–∞—Å—Ç")

    t = text.strip()
    if not t:
        return

    # === 2) –†–µ–ø—É—Ç–∞—Ü–∏—è (+1/-1) ===
    if REP_CMD.match(t):
        is_plus = t.startswith("+")
        giver = msg.from_user
        target_user: Optional[User] = None
        target_id: Optional[int] = None
        target_name: Optional[str] = None

        if msg.reply_to_message and msg.reply_to_message.from_user:
            target_user = msg.reply_to_message.from_user
            target_id = target_user.id
            target_name = _display_name(target_user)
            await _remember_user(target_user)
        else:
            parts = t.split()
            if len(parts) >= 2 and parts[1].startswith("@"):
                uid2 = KNOWN.get(parts[1][1:].lower())
                if uid2:
                    target_id = uid2
                    target_name = parts[1]

        if target_id is None:
            await msg.reply_text("–ö–æ–º—É —Å—Ç–∞–≤–∏–º —Ä–µ–ø—É? –û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏ @username.")
            return

        # –ª–∏–º–∏—Ç –≤—ã–¥–∞—á –∑–∞ 24 —á–∞—Å–∞
        now = datetime.now(UTC)
        arr = REP_GIVE_TIMES.get(giver.id, [])
        arr = [tt for tt in arr if now - tt < REP_WINDOW]
        REP_GIVE_TIMES[giver.id] = arr
        if len(arr) >= REP_DAILY_LIMIT:
            oldest = min(arr)
            secs = int((oldest + REP_WINDOW - now).total_seconds())
            mins = secs // 60
            await msg.reply_text(f"–õ–∏–º–∏—Ç —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ –Ω–∞ 24 —á–∞—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω (10/10). –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ ~{mins} –º–∏–Ω.")
            return
        arr.append(now)
        REP_GIVE_TIMES[giver.id] = arr

        # –∑–∞–ø—Ä–µ—Ç ¬´+1 —Å–µ–±–µ¬ª
        if is_plus and target_id == giver.id:
            if _achieve(giver.id, "–ß–∏—Ç–µ—Ä —ë–±–∞–Ω—ã–π"):
                await msg.reply_text("¬´–ß–∏—Ç–µ—Ä —ë–±–∞–Ω—ã–π¬ª üèÖ ‚Äî –∑–∞ –ø–æ–ø—ã—Ç–∫—É +1 —Å–µ–±–µ. –ù–µ–ª—å–∑—è!")
            else:
                await msg.reply_text("–ù–µ–ª—å–∑—è +1 —Å–µ–±–µ, —Ö–æ—Ä–æ—à –º—É—Ö–ª–µ–≤–∞—Ç—å üêç")
            return

        delta = 1 if is_plus else -1
        REP_RECEIVED[target_id] = REP_RECEIVED.get(target_id, 0) + delta
        REP_GIVEN[giver.id] = REP_GIVEN.get(giver.id, 0) + delta
        if delta > 0:
            REP_POS_GIVEN[giver.id] = REP_POS_GIVEN.get(giver.id, 0) + 1
        else:
            REP_NEG_GIVEN[giver.id] = REP_NEG_GIVEN.get(giver.id, 0) + 1

        # –∞–¥–º–∏–Ω-–≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
        try:
            if await _is_admin(update.effective_chat.id, target_id, context):
                if delta > 0:
                    ADMIN_PLUS_GIVEN[giver.id] = ADMIN_PLUS_GIVEN.get(giver.id, 0) + 1
                    if ADMIN_PLUS_GIVEN.get(giver.id, 0) >= 5 and _achieve(giver.id, "–ü–æ–¥—Ö–∞–ª–∏–º –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π"):
                        await _announce_achievement(context, update.effective_chat.id, giver.id, "–ü–æ–¥—Ö–∞–ª–∏–º –≥–µ–Ω–µ—Ä–∞–ª—å—Å–∫–∏–π")
                else:
                    ADMIN_MINUS_GIVEN[giver.id] = ADMIN_MINUS_GIVEN.get(giver.id, 0) + 1
                    if ADMIN_MINUS_GIVEN.get(giver.id, 0) >= 3 and _achieve(giver.id, "–£–∂–∞–ª–∏–ª –∫–æ—Ä–æ–ª—è"):
                        await _announce_achievement(context, update.effective_chat.id, giver.id, "–£–∂–∞–ª–∏–ª –∫–æ—Ä–æ–ª—è")
        except Exception:
            pass

        # –±–æ–ª—å—à–∏–µ —Ä–µ–ø-–∞—á–∏–≤–∫–∏ –¥–ª—è —Ü–µ–ª–∏
        total_target = REP_RECEIVED.get(target_id, 0)
        if total_target >= 20 and _achieve(target_id, "–õ—é–±–∏–º—á–∏–∫, —Å—É–∫–∞"):
            await _announce_achievement(context, update.effective_chat.id, target_id, "–õ—é–±–∏–º—á–∏–∫, —Å—É–∫–∞")
        if total_target <= -10 and _achieve(target_id, "–¢–æ–∫—Å–∏–∫-–º–∞–≥–Ω–∏—Ç"):
            await _announce_achievement(context, update.effective_chat.id, target_id, "–¢–æ–∫—Å–∏–∫-–º–∞–≥–Ω–∏—Ç")
        if total_target >= 50 and _achieve(target_id, "–ö—Ä—É—Ç–æ–π —á–µ–ª"):
            await _announce_achievement(context, update.effective_chat.id, target_id, "–ö—Ä—É—Ç–æ–π —á–µ–ª")
        if total_target <= -20 and _achieve(target_id, "–û–ø—É—â–µ–Ω–Ω—ã–π"):
            await _announce_achievement(context, update.effective_chat.id, target_id, "–û–ø—É—â–µ–Ω–Ω—ã–π")

        # ¬´–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫¬ª, ¬´–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü¬ª, ¬´–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫¬ª
        total_gives = REP_POS_GIVEN.get(giver.id, 0) + REP_NEG_GIVEN.get(giver.id, 0)
        if total_gives >= 20 and _achieve(giver.id, "–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫"):
            await _announce_achievement(context, update.effective_chat.id, giver.id, "–ó–∞–≤–æ–¥–∏–ª–∞-–ø–ª—é—Å–æ–≤–∏–∫")
        if REP_POS_GIVEN.get(giver.id, 0) >= 10 and _achieve(giver.id, "–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü"):
            await _announce_achievement(context, update.effective_chat.id, giver.id, "–©–µ–¥—Ä—ã–π –∑–∞—Å—Ä–∞–Ω–µ—Ü")
        if REP_NEG_GIVEN.get(giver.id, 0) >= 10 and _achieve(giver.id, "–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫"):
            await _announce_achievement(context, update.effective_chat.id, giver.id, "–ú–∏–Ω—É—Å–∞—Ç–æ—Ä-–º–∞–Ω—å—è–∫")

        sign = "+" if delta > 0 else "-"
        await msg.reply_text(f"{NAMES.get(target_id, f'id{target_id}')} –ø–æ–ª—É—á–∞–µ—Ç {sign}1. –¢–µ–∫—É—â–∞—è —Ä–µ–ø–∞: {total_target}")
        return  # –ø–æ—Å–ª–µ —Ä–µ–ø—ã —Ç—Ä–∏–≥–≥–µ—Ä—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

    # === 3) –¢—Ä–∏–≥–≥–µ—Ä—ã ===
    for idx, (pattern, answers) in enumerate(TRIGGERS):
        if pattern.search(t):
            if _trigger_allowed(update.effective_chat.id):
                await msg.reply_text(random.choice(answers))
                _inc(TRIGGER_HITS, uid)
                if TRIGGER_HITS.get(uid, 0) >= 15 and _achieve(uid, "–¢—Ä–∏–≥–≥–µ—Ä-–º–µ–π–∫–µ—Ä"):
                    await _announce_achievement(context, update.effective_chat.id, uid, "–¢—Ä–∏–≥–≥–µ—Ä-–º–µ–π–∫–µ—Ä")
                if idx == 1:  # ¬´–ø–∏–≤–æ¬ª
                    _inc(BEER_HITS, uid)
                    if BEER_HITS.get(uid, 0) >= 5 and _achieve(uid, "–ü–∏–≤–Ω–æ–π —Å–æ–º–µ–ª—å–µ-–∞–ª–∫–∞—à"):
                        await _announce_achievement(context, update.effective_chat.id, uid, "–ü–∏–≤–Ω–æ–π —Å–æ–º–µ–ª—å–µ-–∞–ª–∫–∞—à")
                    if BEER_HITS.get(uid, 0) >= 20 and _achieve(uid, "–ü–∏–≤–æ–∑–∞–≤—Ä"):
                        await _announce_achievement(context, update.effective_chat.id, uid, "–ü–∏–≤–æ–∑–∞–≤—Ä")
            break

    # === 4) NSFW-–¥–µ—Ç–µ–∫—Ç –¥–ª—è ¬´–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç¬ª ===
    if re.compile(r"\b(—Å–µ–∫—Å|69|–∫—É—Ç—ë–∂|–∂–æ–ø|–ø–µ—Ä–¥|—Ñ–∞–ª–ª|—ç—Ä–æ—Ç|–ø–æ—Ä–Ω|xxx|üçë|üçÜ)\b", re.IGNORECASE).search(t):
        if _achieve(uid, "–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç"):
            await _announce_achievement(context, update.effective_chat.id, uid, "–°–æ—Ä—Ç–∏—Ä–Ω—ã–π –ø–æ—ç—Ç")
# ========= –°–¢–ê–¢–ò–°–¢–ò–ö–ê =========
def _name_or_id(uid: int) -> str:
    return NAMES.get(uid, f"id{uid}")

def build_stats_text(chat_id: int) -> str:
    # –¢–æ–ø –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ (3 –º–µ—Å—Ç–∞)
    top = sorted(REP_RECEIVED.items(), key=lambda x: x[1], reverse=True)[:3]
    top_lines = [f"‚Ä¢ {_name_or_id(uid)}: {score}" for uid, score in top] or ["‚Ä¢ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"]

    # –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏ (–ø–æ —á–∞—Ç—É)
    nick_items = NICKS.get(chat_id, {})
    nick_lines = [f"‚Ä¢ {_name_or_id(uid)}: {nick}" for uid, nick in nick_items.items()] or ["‚Ä¢ –ø–æ–∫–∞ –Ω–∏–∫–æ–º—É –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω–æ"]

    # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Ç–æ–ø-3 –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º)
    top_msg = sorted(MSG_COUNT.items(), key=lambda x: x[1], reverse=True)[:3]
    msg_lines = [f"‚Ä¢ {_name_or_id(uid)}: {cnt} —Å–º—Å / {CHAR_COUNT.get(uid,0)} —Å–∏–º–≤."
                 for uid, cnt in top_msg] or ["‚Ä¢ –ø–æ–∫–∞ –ø—É—Å—Ç–æ"]

    # –ê—á–∏–≤–∫–∏ –ø–æ –ª—é–¥—è–º (–≤—Å–µ, —É –∫–æ–≥–æ –æ–Ω–∏ –µ—Å—Ç—å)
    ach_lines = []
    for uid, titles in ACHIEVEMENTS.items():
        if not titles:
            continue
        title_list = ", ".join(sorted(titles))
        ach_lines.append(f"‚Ä¢ {_name_or_id(uid)}: {title_list}")
    if not ach_lines:
        ach_lines = ["‚Ä¢ –ø–æ–∫–∞ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç"]

    return (
        f"{STATS_TITLE}\n\n"
        "üèÜ –¢–æ–ø –ø–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏:\n" + "\n".join(top_lines) + "\n\n"
        "üìù –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏:\n" + "\n".join(nick_lines) + "\n\n"
        "‚å®Ô∏è –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n" + "\n".join(msg_lines) + "\n\n"
        "üèÖ –ê—á–∏–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n" + "\n".join(ach_lines)
    )

# ========= HEALTH –¥–ª—è Render =========
app = Flask(__name__)
@app.get("/")
def health():
    return "Bot is running!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# ========= ENTRY =========
async def _pre_init(app: Application):
    # –Ω–∞ –≤—Å—è–∫–∏–π: —É–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

def main():
    # –º–∏–Ω–∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    threading.Thread(target=run_flask, daemon=True).start()

    # ¬´—Ç–∏—Ö–∏–µ¬ª —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è polling (–º–µ–Ω—å—à–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –Ω–∞ free)
    req = HTTPXRequest(connect_timeout=10.0, read_timeout=25.0, pool_timeout=5.0)

    application: Application = (
        ApplicationBuilder()
        .token(API_TOKEN)
        .get_updates_request(req)
        .post_init(_pre_init)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help",  cmd_help))
    application.add_handler(CommandHandler("nick",  cmd_nick))
    application.add_handler(CommandHandler("8ball", cmd_8ball))
    application.add_handler(CommandHandler("ach",   cmd_ach))  # –¥—É–±–ª—ë—Ä –∫–Ω–æ–ø–∫–∏

    # –ö–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(on_button))

    # –ï–î–ò–ù–´–ô –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤ (–Ω–µ –∫–æ–º–∞–Ω–¥)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, on_text))

    # –ó–∞–ø—É—Å–∫ polling
    from telegram import Update as TgUpdate
    application.run_polling(
        allowed_updates=TgUpdate.ALL_TYPES,
        timeout=25,
        poll_interval=1.0,
        drop_pending_updates=True,
        close_loop=False,
    )

if __name__ == "__main__":
    main()
            
