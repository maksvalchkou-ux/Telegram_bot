import os
import random
import threading
from datetime import datetime, timedelta
from typing import Dict, Optional

from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, User
from telegram.ext import (
    Application, ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    ContextTypes
)
from telegram.request import HTTPXRequest  # —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è polling

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# >>> –î–õ–Ø –¢–ï–°–¢–ê: 10 —Å–µ–∫—É–Ω–¥. –ü–æ—Ç–æ–º –≤–µ—Ä–Ω–∏ –Ω–∞ hours=1 <<<
NICK_COOLDOWN = timedelta(seconds=10)

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∞–º–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ üî•\n\n"
    "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é, –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞—á–∏–≤–∫–∏."
)

HELP_TEXT = (
    "üõ† –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç (v1, –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π / polling):\n"
    "‚Ä¢ /start ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
    "‚Ä¢ /nick ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫ —Å–µ–±–µ\n"
    "‚Ä¢ /nick @user –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫ –¥—Ä—É–≥—É (–≤–∫–ª—é—á–∞—è –∞–¥–º–∏–Ω–∞)\n"
    "‚Ä¢ –ê–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä—ã –∏ –∫—É–ª–¥–∞—É–Ω (—Å–µ–π—á–∞—Å 10 —Å–µ–∫ –¥–ª—è —Ç–µ—Å—Ç–∞)\n\n"
    "–°oon: —Ç—Ä–∏–≥–≥–µ—Ä—ã, 8ball, —Ä–µ–ø—É—Ç–∞—Ü–∏—è, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –∞—á–∏–≤–∫–∏."
)

STATS_PLACEHOLDER = (
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "‚Ä¢ –¢–æ–ø —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è/—Å–∏–º–≤–æ–ª—ã: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –ê—á–∏–≤–∫–∏: —Å–∫–æ—Ä–æ"
)

ACHIEVEMENTS_PLACEHOLDER = "üèÖ –°–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ v1)."

# ========= –ö–ù–û–ü–ö–ò =========
BTN_HELP = "help_info"
BTN_STATS = "stats_open"
BTN_ACH = "ach_list"

def main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üß∞ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", callback_data=BTN_HELP)],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=BTN_STATS),
            InlineKeyboardButton("üèÖ –ê—á–∏–≤–∫–∏", callback_data=BTN_ACH),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

# ========= –ü–ê–ú–Ø–¢–¨ (in-memory) =========
NICKS: Dict[int, Dict[int, str]] = {}   # chat_id -> { user_id: nick }
TAKEN: Dict[int, set] = {}              # chat_id -> set(nick)
LAST: Dict[int, datetime] = {}          # initiator_id -> last nick time
KNOWN: Dict[str, int] = {}              # username_lower -> user_id

# ========= –°–õ–û–í–ê–†–ò –î–õ–Ø –ù–ò–ö–û–í =========
ADJ = [
    "—à–∞–ª—å–Ω–æ–π","—Ö—Ä—É—Å—Ç—è—â–∏–π","–ª—ã—Å—ã–π","–±—É—Ä–ª—è—â–∏–π","–ª–∞–º–ø–æ–≤—ã–π","–∫–æ–≤–∞—Ä–Ω—ã–π","–±–∞—Ä—Ö–∞—Ç–Ω—ã–π","–¥–µ—Ä–∑–∫–∏–π","–º—è–≥–∫–æ—Ç–µ–ª—ã–π",
    "—Å—Ç–∞–ª—å–Ω–æ–π","—Å–æ–Ω–Ω—ã–π","–±—Ä–∞–≤—ã–π","—Ö–∏—Ç—Ä—ã–π","–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π","—Å–æ–ª—ë–Ω—ã–π","–¥—ã–º–Ω—ã–π","–ø—Ä—è–Ω—ã–π","–±–æ–¥—Ä—ã–π","—Ç—ë–ø–ª—ã–π",
    "–≥—Ä–æ–∑–Ω—ã–π","–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π","–±–∞—Ä—Å–∫–∏–π","–≤–µ—Å—ë–ª—ã–π","—Ä–∞–Ω–¥–æ–º–Ω—ã–π","–≤–µ–ª–∏–∫–æ—Å–≤–µ—Ç—Å–∫–∏–π"
]
NOUN = [
    "—ë–∂","–∫—Ä–∞–±","–±–∞—Ä—Å—É–∫","–∂–∏—Ä–∞—Ñ","–∫–∞—Ä–∞—Å—å","–±–∞—Ä–æ–Ω","–ø–∏—Ä–∞—Ç","—Å–∞–º—É—Ä–∞–π","—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç","–∫–ª–æ—É–Ω","–≤–æ–ª–∫","–∫–æ—Ç",
    "–∫–∞–±–∞–Ω","–º–µ–¥–≤–µ–¥—å","—Å–æ–≤–∞","–¥—Ä–∞–∫–æ–Ω–¥–æ–Ω","–≥—É—Å—å","–∫–æ–∑—ã—Ä—å","–¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","—à–∞–º–∞–Ω","–∫–∏–±–æ—Ä–≥","–∞—Ä–±—É–∑","–∫–æ–ª–æ–±–æ–∫",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä","—á–µ—Ä–≤—è–∫"
]
TAILS = [
    "–∏–∑ –ø–æ–¥—ä–µ–∑–¥–∞ ‚Ññ3","—Å –ø—Ä–∏–≤–µ—Ç–æ–º","–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö","XL","–≤ —Ç–∞–ø–∫–∞—Ö","–∏–∑ –±—É–¥—É—â–µ–≥–æ","–ø—Ä–∏ –±–∞–±–æ—á–∫–µ","deluxe",
    "edition 2.0","–±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤","–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ","—Å –æ–≥–æ–Ω—å–∫–æ–º","–≤ –æ—Ç—Å—Ç–∞–≤–∫–µ","–Ω–∞ –±–æ–±–∏–Ω–µ","turbo","‚Ñ¢Ô∏è",
    "prime","–Ω–∞ —Ä–∞–π–æ–Ω–µ","—Å —Å—é—Ä–ø—Ä–∏–∑–æ–º","VIP"
]
EMOJIS = ["ü¶î","ü¶Ä","ü¶ä","üêª","üê∫","üêó","üê±","ü¶â","üêü","ü¶Ü","ü¶Ñ","üê≤","ü•í","üçâ","üßÄ","üçî","üç∫","‚òïÔ∏è","üî•","üí£","‚ú®","üõ†Ô∏è","üëë","üõ∏"]
SPICY = [
    "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø","—Ö–∏—Ç—Ä–æ–∂–æ–ø","–∑–∞–¥–æ—Ä–Ω—ã–π –±—É–∑–æ—Ç—ë—Ä","–ø–æ—Ä–æ—á–Ω—ã–π –¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","–¥–≤–æ—Ä–æ–≤—ã–π –∫–Ω—è–∑—å",
    "–±–∞—Ä–æ–Ω —Å –ø–æ–Ω—Ç–∞–º–∏","—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç","—Å–∞–º—É—Ä–∞–π-–Ω–µ–¥–æ—É—á–∫–∞","–∫–∏–±–æ—Ä–≥ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Ö",
    "–ø–∏—Ä–∞—Ç –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏","–∫–ª–æ—É–Ω-–ø–æ—Ñ–∏–≥–∏—Å—Ç","–±–∞—Ä—Å—É–∫-–±—Ä–æ–¥—è–≥–∞"
]

# ========= –£–¢–ò–õ–ò–¢–´ =========
def _user_key(u: User) -> str:
    return f"@{u.username}" if u.username else (u.full_name or f"id{u.id}")

def _ensure_chat(chat_id: int):
    if chat_id not in NICKS:
        NICKS[chat_id] = {}
    if chat_id not in TAKEN:
        TAKEN[chat_id] = set()

async def _save_known(u: User):
    if u and u.username:
        KNOWN[u.username.lower()] = u.id

def _cooldown_text(uid: int) -> Optional[str]:
    now = datetime.utcnow()
    last = LAST.get(uid)
    if last and now - last < NICK_COOLDOWN:
        left = int((last + NICK_COOLDOWN - now).total_seconds())
        return f"–ø–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{left} —Å–µ–∫."
    return None

def _mark(uid: int):
    LAST[uid] = datetime.utcnow()

def _make_nick(chat_id: int, prev: Optional[str]) -> str:
    _ensure_chat(chat_id)
    taken = TAKEN[chat_id]
    for _ in range(50):
        parts = []
        if random.random() < 0.25:
            parts.append(random.choice(SPICY))
        else:
            parts.append(random.choice(ADJ))
        parts.append(random.choice(NOUN))
        if random.random() < 0.85:
            parts.append(random.choice(TAILS))
        nick = " ".join(parts)
        if random.random() < 0.7:
            nick += " " + random.choice(EMOJIS)
        if prev and nick == prev:
            continue
        if nick in taken:
            continue
        return nick
    return f"{random.choice(ADJ)} {random.choice(NOUN)} {random.choice(TAILS)}"

def _apply_nick(chat_id: int, user_id: int, new_nick: str):
    _ensure_chat(chat_id)
    prev = NICKS[chat_id].get(user_id)
    if prev:
        TAKEN[chat_id].discard(prev)
    NICKS[chat_id][user_id] = new_nick
    TAKEN[chat_id].add(new_nick)

def _resolve_reply_target(update: Update) -> Optional[User]:
    if update.message and update.message.reply_to_message:
        return update.message.reply_to_message.from_user
    return None

def _resolve_arg_target(context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    if not context.args:
        return None
    arg = context.args[0]
    if arg.startswith("@"):
        return KNOWN.get(arg[1:].lower())
    return None

# ========= –ö–û–ú–ê–ù–î–´/–ö–ù–û–ü–ö–ò =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await _save_known(update.effective_user)
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    data = q.data
    if data == BTN_HELP:
        await q.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())
    elif data == BTN_STATS:
        await q.message.reply_text(STATS_PLACEHOLDER, reply_markup=main_keyboard())
    elif data == BTN_ACH:
        await q.message.reply_text(ACHIEVEMENTS_PLACEHOLDER, reply_markup=main_keyboard())
    else:
        await q.message.reply_text("¬Ø\\_(„ÉÑ)_/¬Ø –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=main_keyboard())

async def cmd_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    await _save_known(update.effective_user)

    chat_id = update.effective_chat.id
    initiator = update.effective_user

    cd = _cooldown_text(initiator.id)
    if cd:
        await update.message.reply_text(f"–ü–æ—Ç–µ—Ä–ø–∏, {cd}")
        return

    # —Ü–µ–ª—å: reply > @user > —Å–∞–º —Å–µ–±–µ
    target_user = _resolve_reply_target(update)
    target_id: Optional[int] = None
    target_name: Optional[str] = None

    if target_user:
        target_id = target_user.id
        target_name = _user_key(target_user)
        await _save_known(target_user)
    else:
        by_arg = _resolve_arg_target(context)
        if by_arg:
            target_id = by_arg
            for uname, uid in KNOWN.items():
                if uid == by_arg:
                    target_name = f"@{uname}"
                    break

    if target_id is None:
        target_id = initiator.id
        target_name = _user_key(initiator)

    _ensure_chat(chat_id)
    prev = NICKS[chat_id].get(target_id)
    new_nick = _make_nick(chat_id, prev)
    _apply_nick(chat_id, target_id, new_nick)
    _mark(initiator.id)

    if target_id == initiator.id:
        await update.message.reply_text(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫: ¬´{new_nick}¬ª")
    else:
        await update.message.reply_text(f"{target_name} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω(–∞) –∫–∞–∫ ¬´{new_nick}¬ª")

# ========= ERROR HANDLER =========
async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    try:
        print("ERROR:", context.error)
    except Exception:
        pass

# ========= HEALTH-–°–ï–†–í–ï–† –î–õ–Ø RENDER =========
app = Flask(__name__)
@app.get("/")
def health():
    return "Bot is running!"

def run_flask():
    port = int(os.getenv("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# ========= ENTRY =========
async def _pre_init(app: Application):
    # –ù–∞ –≤—Å—è–∫–∏–π: —Å–Ω–µ—Å—Ç–∏ webhook –ø–µ—Ä–µ–¥ polling, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    try:
        await app.bot.delete_webhook(drop_pending_updates=True)
    except Exception:
        pass

def main():
    # Render –ª—é–±–∏—Ç, –∫–æ–≥–¥–∞ –ø–æ—Ä—Ç —Å–ª—É—à–∞–µ—Ç—Å—è ‚Äî –ø–æ–¥–Ω–∏–º–µ–º health-—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=run_flask, daemon=True).start()

    # –£–∫–æ—Ä–æ—á–µ–Ω–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è getUpdates (–º–µ–Ω—å—à–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤)
    req = HTTPXRequest(
        connect_timeout=10.0,
        read_timeout=25.0,   # long-poll —á—Ç–µ–Ω–∏–µ
        pool_timeout=5.0,
    )

    application: Application = (
        ApplicationBuilder()
        .token(API_TOKEN)
        .get_updates_request(req)   # <‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–æ–∏ —Ç–∞–π–º–∞—É—Ç—ã
        .post_init(_pre_init)
        .build()
    )

    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", cmd_start))
    application.add_handler(CommandHandler("help", cmd_help))
    application.add_handler(CommandHandler("nick", cmd_nick))

    # –ö–Ω–æ–ø–∫–∏
    application.add_handler(CallbackQueryHandler(on_button))

    # –û—à–∏–±–∫–∏
    application.add_error_handler(on_error)

    # –ó–∞–ø—É—Å–∫ polling
    from telegram import Update as TgUpdate
    application.run_polling(
        allowed_updates=TgUpdate.ALL_TYPES,
        timeout=25,               # —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–æ —Å read_timeout
        poll_interval=1.0,
        drop_pending_updates=True,
        close_loop=False,
    )

if __name__ == "__main__":
    main()
