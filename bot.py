import os
import random
from datetime import datetime, timedelta
from typing import Dict, Tuple, Optional

from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, User, Poll
)
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes, PollHandler
)

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
API_TOKEN = os.getenv("BOT_TOKEN")
if not API_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set")

# Render –¥–∞—ë—Ç –ø—É–±–ª–∏—á–Ω—ã–π URL –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
PUBLIC_URL = os.getenv("RENDER_EXTERNAL_URL") or os.getenv("PUBLIC_URL")
if not PUBLIC_URL:
    # –ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –ø—Ä–æ–ø–∏—Å–∞—Ç—å PUBLIC_URL –≤—Ä—É—á–Ω—É—é –≤ Environment, –µ—Å–ª–∏ —á—Ç–æ
    raise RuntimeError("RENDER_EXTERNAL_URL (–∏–ª–∏ PUBLIC_URL) is not set")

PORT = int(os.getenv("PORT", 5000))

# >>> –î–õ–Ø –¢–ï–°–¢–ê: 10 —Å–µ–∫—É–Ω–¥. –ü–æ—Ç–æ–º –≤–µ—Ä–Ω–∏—Ç–µ –Ω–∞ hours=1 <<<
NICK_COOLDOWN = timedelta(seconds=10)

# ========= –¢–ï–ö–°–¢–´ =========
WELCOME_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∞–º–ø–æ–≤—ã–π –±–æ—Ç –¥–ª—è —á–∞—Ç–∞ üî•\n\n"
    "–ñ–º–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —á—Ç–æ —è —É–º–µ—é, –∏–ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞—á–∏–≤–∫–∏."
)

HELP_TEXT = (
    "üõ† –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç (v1 + –Ω–∏–∫–∏):\n"
    "‚Ä¢ /start ‚Äî –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
    "‚Ä¢ /nick ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫ —Å–µ–±–µ\n"
    "‚Ä¢ /nick @user –∏–ª–∏ –æ—Ç–≤–µ—Ç–æ–º ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–∏–∫ –¥—Ä—É–≥—É\n"
    "‚Ä¢ –ï—Å–ª–∏ —Ü–µ–ª—å ‚Äî –∞–¥–º–∏–Ω: –∑–∞–ø—É—Å–∫–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (2 –º–∏–Ω—É—Ç—ã)\n"
    "‚Ä¢ –õ–∏–º–∏—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞: —Å–µ–π—á–∞—Å 10 —Å–µ–∫ (–¥–ª—è —Ç–µ—Å—Ç–∞), –∞–Ω—Ç–∏–ø–æ–≤—Ç–æ—Ä—ã\n\n"
    "–î–∞–ª—å—à–µ –¥–æ–±–∞–≤–∏–º —Ä–µ–ø—É—Ç–∞—Ü–∏—é, 8ball, —Ç—Ä–∏–≥–≥–µ—Ä—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –∞—á–∏–≤–∫–∏."
)

STATS_PLACEHOLDER = (
    "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "‚Ä¢ –¢–æ–ø —Ä–µ–ø—É—Ç–∞—Ü–∏–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –¢–µ–∫—É—â–∏–µ –Ω–∏–∫–∏: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è/—Å–∏–º–≤–æ–ª—ã: —Å–∫–æ—Ä–æ\n"
    "‚Ä¢ –ê—á–∏–≤–∫–∏: —Å–∫–æ—Ä–æ\n\n"
    "–ü—Ä–æ–∫–∞—á–∞–µ–º —ç—Ç–æ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö üòâ"
)

ACHIEVEMENTS_PLACEHOLDER = (
    "üèÖ –°–ø–∏—Å–æ–∫ –∞—á–∏–≤–æ–∫ (–∑–∞–≥–ª—É—à–∫–∞ v1):\n"
    "–ú–∞—Ç—ë—Ä—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —É–∂–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ üòà\n"
    "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ—á–µ–Ω—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –ø–æ–ª—É—á–µ–Ω–∏—è."
)

# ========= –ö–ù–û–ü–ö–ò =========
BTN_HELP = "help_info"
BTN_STATS = "stats_open"
BTN_ACH = "ach_list"

def main_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("üß∞ –ß—Ç–æ —É–º–µ–µ—Ç —ç—Ç–æ—Ç –±–æ—Ç", callback_data=BTN_HELP)],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=BTN_STATS),
            InlineKeyboardButton("üèÖ –ê—á–∏–≤–∫–∏", callback_data=BTN_ACH),
        ],
    ]
    return InlineKeyboardMarkup(keyboard)

# ========= –ü–ê–ú–Ø–¢–¨ =========
NICKS: Dict[int, Dict[int, str]] = {}
TAKEN_NICKS: Dict[int, set] = {}
LAST_NICK_ACTION: Dict[int, datetime] = {}
KNOWN_USERS: Dict[str, int] = {}
ADMIN_NICK_POLLS: Dict[str, Tuple[int, int, str, str]] = {}
POLL_MSG_ID: Dict[str, int] = {}

# ========= –°–õ–û–í–ê–†–ò –î–õ–Ø –ù–ò–ö–û–í =========
ADJ = [
    "—à–∞–ª—å–Ω–æ–π","—Ö—Ä—É—Å—Ç—è—â–∏–π","–ª—ã—Å—ã–π","–±—É—Ä–ª—è—â–∏–π","–ª–∞–º–ø–æ–≤—ã–π","–∫–æ–≤–∞—Ä–Ω—ã–π","–±–∞—Ä—Ö–∞—Ç–Ω—ã–π","–¥–µ—Ä–∑–∫–∏–π","–º—è–≥–∫–æ—Ç–µ–ª—ã–π",
    "—Å—Ç–∞–ª—å–Ω–æ–π","—Å–æ–Ω–Ω—ã–π","–±—Ä–∞–≤—ã–π","—Ö–∏—Ç—Ä—ã–π","–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π","—Å–æ–ª—ë–Ω—ã–π","–¥—ã–º–Ω—ã–π","–ø—Ä—è–Ω—ã–π","–±–æ–¥—Ä—ã–π","—Ç—ë–ø–ª—ã–π",
    "–≥—Ä–æ–∑–Ω—ã–π","–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π","–±–∞—Ä—Å–∫–∏–π","–≤–µ—Å—ë–ª—ã–π","—Ä–∞–Ω–¥–æ–º–Ω—ã–π","–≤–µ–ª–∏–∫–æ—Å–≤–µ—Ç—Å–∫–∏–π"
]
NOUN = [
    "—ë–∂","–∫—Ä–∞–±","–±–∞—Ä—Å—É–∫","–∂–∏—Ä–∞—Ñ","–∫–∞—Ä–∞—Å—å","–±–∞—Ä–æ–Ω","–ø–∏—Ä–∞—Ç","—Å–∞–º—É—Ä–∞–π","—Ç—Ä–∞–∫—Ç–æ—Ä–∏—Å—Ç","–∫–ª–æ—É–Ω","–≤–æ–ª–∫","–∫–æ—Ç",
    "–∫–∞–±–∞–Ω","–º–µ–¥–≤–µ–¥—å","—Å–æ–≤–∞","–¥—Ä–∞–∫–æ–Ω–¥–æ–Ω","–≥—É—Å—å","–∫–æ–∑—ã—Ä—å","–¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","—à–∞–º–∞–Ω","–∫–∏–±–æ—Ä–≥","–∞—Ä–±—É–∑","–∫–æ–ª–æ–±–æ–∫",
    "–ø—Ä–æ—Ñ–µ—Å—Å–æ—Ä","—á–µ—Ä–≤—è–∫"
]
TAILS = [
    "–∏–∑ –ø–æ–¥—ä–µ–∑–¥–∞ ‚Ññ3","—Å –ø—Ä–∏–≤–µ—Ç–æ–º","–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö","XL","–≤ —Ç–∞–ø–∫–∞—Ö","–∏–∑ –±—É–¥—É—â–µ–≥–æ","–ø—Ä–∏ –±–∞–±–æ—á–∫–µ","deluxe",
    "edition 2.0","–±–µ–∑ —Ç–æ—Ä–º–æ–∑–æ–≤","–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ","—Å –æ–≥–æ–Ω—å–∫–æ–º","–≤ –æ—Ç—Å—Ç–∞–≤–∫–µ","–Ω–∞ –±–æ–±–∏–Ω–µ","turbo","‚Ñ¢Ô∏è",
    "prime","–Ω–∞ —Ä–∞–π–æ–Ω–µ","—Å —Å—é—Ä–ø—Ä–∏–∑–æ–º","VIP"
]
EMOJIS = ["ü¶î","ü¶Ä","ü¶ä","üêª","üê∫","üêó","üê±","ü¶â","üêü","ü¶Ü","ü¶Ñ","üê≤","ü•í","üçâ","üßÄ","üçî","üç∫","‚òïÔ∏è","üî•","üí£","‚ú®","üõ†Ô∏è","üëë","üõ∏"]
SPICY = [
    "–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø","—Ö–∏—Ç—Ä–æ–∂–æ–ø","–∑–∞–¥–æ—Ä–Ω—ã–π –±—É–∑–æ—Ç—ë—Ä","–ø–æ—Ä–æ—á–Ω—ã–π –¥–∂–µ–Ω—Ç–ª—å–º–µ–Ω","–¥–≤–æ—Ä–æ–≤—ã–π –∫–Ω—è–∑—å",
    "–±–∞—Ä–æ–Ω —Å –ø–æ–Ω—Ç–∞–º–∏","—Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç","—Å–∞–º—É—Ä–∞–π-–Ω–µ–¥–æ—É—á–∫–∞","–∫–∏–±–æ—Ä–≥ –Ω–∞ –º–∏–Ω–∏–º–∞–ª–∫–∞—Ö",
    "–ø–∏—Ä–∞—Ç –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏","–∫–ª–æ—É–Ω-–ø–æ—Ñ–∏–≥–∏—Å—Ç","–±–∞—Ä—Å—É–∫-–±—Ä–æ–¥—è–≥–∞"
]

# ========= –£–¢–ò–õ–ò–¢–´ =========
def _user_key(u: User) -> str:
    return f"@{u.username}" if u.username else (u.full_name or f"id{u.id}")

async def _is_admin(chat_id: int, user_id: int, context: ContextTypes.DEFAULT_TYPE) -> bool:
    try:
        member = await context.bot.get_chat_member(chat_id, user_id)
        return member.status in ("administrator", "creator", "owner")
    except Exception:
        return False

def _cooldown_ok(initiator_id: int) -> Optional[str]:
    now = datetime.utcnow()
    last = LAST_NICK_ACTION.get(initiator_id)
    if last and now - last < NICK_COOLDOWN:
        left = (last + NICK_COOLDOWN) - now
        secs = int(left.total_seconds())
        if NICK_COOLDOWN < timedelta(minutes=1):
            return f"–ø–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{secs} —Å–µ–∫."
        mins = max(1, secs // 60)
        return f"–ø–æ–¥–æ–∂–¥–∏ –µ—â—ë ~{mins} –º–∏–Ω."
    return None

def _mark_cooldown(initiator_id: int):
    LAST_NICK_ACTION[initiator_id] = datetime.utcnow()

def _ensure_chat_maps(chat_id: int):
    if chat_id not in NICKS:
        NICKS[chat_id] = {}
    if chat_id not in TAKEN_NICKS:
        TAKEN_NICKS[chat_id] = set()

def _make_nick(chat_id: int, prev: Optional[str]) -> str:
    _ensure_chat_maps(chat_id)
    taken = TAKEN_NICKS[chat_id]
    for _ in range(50):
        parts = []
        if random.random() < 0.25:
            parts.append(random.choice(SPICY))
        else:
            parts.append(random.choice(ADJ))
        parts.append(random.choice(NOUN))
        if random.random() < 0.85:
            parts.append(random.choice(TAILS))
        nick = " ".join(parts)
        if random.random() < 0.7:
            nick += " " + random.choice(EMOJIS)
        if prev and nick == prev:
            continue
        if nick in taken:
            continue
        return nick
    return f"{random.choice(ADJ)} {random.choice(NOUN)} {random.choice(TAILS)}"

def _set_nick(chat_id: int, user_id: int, nick: str):
    _ensure_chat_maps(chat_id)
    prev = NICKS[chat_id].get(user_id)
    if prev and prev in TAKEN_NICKS[chat_id]:
        TAKEN_NICKS[chat_id].discard(prev)
    NICKS[chat_id][user_id] = nick
    TAKEN_NICKS[chat_id].add(nick)

def _resolve_target_user(update: Update) -> Optional[User]:
    if update.message and update.message.reply_to_message:
        return update.message.reply_to_message.from_user
    return None

def _resolve_target_by_arg(context: ContextTypes.DEFAULT_TYPE) -> Optional[int]:
    if not context.args:
        return None
    arg = context.args[0]
    if arg.startswith("@"):
        return KNOWN_USERS.get(arg[1:].lower())
    return None

async def _update_known_user(user: User):
    if user and user.username:
        KNOWN_USERS[user.username.lower()] = user.id

# ========= –ö–û–ú–ê–ù–î–´ –ò –ö–ù–û–ü–ö–ò =========
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await _update_known_user(update.effective_user)
        await update.message.reply_text(WELCOME_TEXT, reply_markup=main_keyboard())

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())

async def on_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    await q.answer()
    data = q.data
    if data == BTN_HELP:
        await q.message.reply_text(HELP_TEXT, reply_markup=main_keyboard())
    elif data == BTN_STATS:
        await q.message.reply_text(STATS_PLACEHOLDER, reply_markup=main_keyboard())
    elif data == BTN_ACH:
        await q.message.reply_text(ACHIEVEMENTS_PLACEHOLDER, reply_markup=main_keyboard())
    else:
        await q.message.reply_text("¬Ø\\_(„ÉÑ)_/¬Ø –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–æ–ø–∫–∞", reply_markup=main_keyboard())

# ---- /nick ----
async def cmd_nick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    await _update_known_user(update.effective_user)

    chat_id = update.effective_chat.id
    initiator = update.effective_user

    cd = _cooldown_ok(initiator.id)
    if cd:
        await update.message.reply_text(f"–ü–æ—Ç–µ—Ä–ø–∏, {cd}")
        return

    target_user = _resolve_target_user(update)
    target_id: Optional[int] = None
    target_username: Optional[str] = None

    if target_user:
        target_id = target_user.id
        target_username = _user_key(target_user)
        await _update_known_user(target_user)
    else:
        by_arg_id = _resolve_target_by_arg(context)
        if by_arg_id:
            target_id = by_arg_id
            for uname, uid in KNOWN_USERS.items():
                if uid == by_arg_id:
                    target_username = f"@{uname}"
                    break

    if target_id is None:
        target_id = initiator.id
        target_username = _user_key(initiator)

    is_target_admin = await _is_admin(chat_id, target_id, context)
    if is_target_admin and target_id != initiator.id:
        _ensure_chat_maps(chat_id)
        prev = NICKS[chat_id].get(target_id)
        new_nick = _make_nick(chat_id, prev)

        poll_msg = await update.message.reply_poll(
            question=f"–ú–µ–Ω—è–µ–º –Ω–∏–∫ –∞–¥–º–∏–Ω—É {target_username} –Ω–∞ ¬´{new_nick}¬ª?",
            options=["–î–∞", "–ù–µ—Ç"],
            is_anonymous=False,
            open_period=120,  # –¢–µ–ª–µ–≥—Ä–∞–º —Å–∞–º –∑–∞–∫—Ä–æ–µ—Ç —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã
        )

        ADMIN_NICK_POLLS[poll_msg.poll.id] = (chat_id, target_id, target_username, new_nick)
        POLL_MSG_ID[poll_msg.poll.id] = poll_msg.message_id

        # –†–µ–∑–µ—Ä–≤: –µ—Å–ª–∏ –∞–ø–¥–µ–π—Ç –Ω–µ –ø—Ä–∏–¥—ë—Ç ‚Äî —Å–∞–º–∏ –∑–∞–∫—Ä–æ–µ–º –∏ –ø–æ–¥–≤–µ–¥—ë–º –∏—Ç–æ–≥
        context.job_queue.run_once(
            close_admin_poll_job,
            when=125,
            data={"poll_id": poll_msg.poll.id, "chat_id": chat_id, "message_id": poll_msg.message_id},
            name=f"closepoll:{poll_msg.poll.id}",
        )

        _mark_cooldown(initiator.id)
        return

    _ensure_chat_maps(chat_id)
    prev = NICKS[chat_id].get(target_id)
    new_nick = _make_nick(chat_id, prev)
    _set_nick(chat_id, target_id, new_nick)
    _mark_cooldown(initiator.id)

    if target_id == initiator.id:
        await update.message.reply_text(f"–¢–≤–æ–π –Ω–æ–≤—ã–π –Ω–∏–∫: ¬´{new_nick}¬ª")
    else:
        await update.message.reply_text(f"{target_username} —Ç–µ–ø–µ—Ä—å –∏–∑–≤–µ—Å—Ç–µ–Ω(–∞) –∫–∞–∫ ¬´{new_nick}¬ª")

# ---- –∞–≤—Ç–æ—Å–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ –æ–ø—Ä–æ—Å–∞ (—Ä–µ–∑–µ—Ä–≤) ----
async def on_poll(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poll: Poll = update.poll
    if poll.id not in ADMIN_NICK_POLLS:
        return
    if not poll.is_closed:
        return

    chat_id, target_id, target_username, pending_nick = ADMIN_NICK_POLLS.pop(poll.id)
    POLL_MSG_ID.pop(poll.id, None)

    yes_votes = 0
    no_votes = 0
    for opt in poll.options:
        if opt.text == "–î–∞":
            yes_votes = opt.voter_count
        elif opt.text == "–ù–µ—Ç":
            no_votes = opt.voter_count

    if yes_votes > no_votes:
        _ensure_chat_maps(chat_id)
        prev = NICKS[chat_id].get(target_id)
        if pending_nick != prev:
            _set_nick(chat_id, target_id, pending_nick)
        text = f"üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! {target_username} —Ç–µ–ø–µ—Ä—å ¬´{pending_nick}¬ª"
    else:
        text = f"‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –ù–∏–∫ {target_username} –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."

    try:
        await context.bot.send_message(chat_id=chat_id, text=text)
    except Exception:
        pass

# ---- –¥–∂–æ–±: –∑–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å —Ä—É–∫–∞–º–∏ –∏ –æ–±—ä—è–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç ----
async def close_admin_poll_job(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    poll_id = data.get("poll_id")
    chat_id = data.get("chat_id")
    message_id = data.get("message_id") or POLL_MSG_ID.get(poll_id)

    closed_poll = None
    if message_id:
        try:
            closed_poll = await context.bot.stop_poll(chat_id=chat_id, message_id=message_id)
        except Exception:
            pass

    info = ADMIN_NICK_POLLS.pop(poll_id, None)
    POLL_MSG_ID.pop(poll_id, None)
    if not info:
        return

    target_chat_id, target_id, target_username, pending_nick = info

    yes_votes = 0
    no_votes = 0
    if closed_poll:
        for opt in closed_poll.options:
            if opt.text == "–î–∞":
                yes_votes = opt.voter_count
            elif opt.text == "–ù–µ—Ç":
                no_votes = opt.voter_count

    passed = yes_votes > no_votes

    if passed:
        _ensure_chat_maps(target_chat_id)
        prev = NICKS[target_chat_id].get(target_id)
        if pending_nick != prev:
            _set_nick(target_chat_id, target_id, pending_nick)
        result = f"üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! {target_username} —Ç–µ–ø–µ—Ä—å ¬´{pending_nick}¬ª"
    else:
        result = f"‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –ù–∏–∫ {target_username} –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."

    try:
        await context.bot.send_message(chat_id=target_chat_id, text=result)
    except Exception:
        pass

# ---- –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞: —Ñ–æ—Ä—Å-–∑–∞–∫—Ä—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—Ä–æ—Å ----
async def cmd_pollclose(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return
    chat_id = update.effective_chat.id
    me = update.effective_user

    if not await _is_admin(chat_id, me.id, context):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    poll_id = None
    info = None
    for pid, data in ADMIN_NICK_POLLS.items():
        if data[0] == chat_id:
            poll_id = pid
            info = data
            break

    if not poll_id or not info:
        await update.message.reply_text("–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    message_id = POLL_MSG_ID.get(poll_id)
    if not message_id:
        await update.message.reply_text("–ù–µ –Ω–∞—à—ë–ª message_id –æ–ø—Ä–æ—Å–∞. –ó–∞–ø—É—Å—Ç–∏ –Ω–æ–≤—ã–π.")
        return

    try:
        closed_poll = await context.bot.stop_poll(chat_id=chat_id, message_id=message_id)
    except Exception as e:
        await update.message.reply_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ–ø—Ä–æ—Å: {e}")
        return

    ADMIN_NICK_POLLS.pop(poll_id, None)
    POLL_MSG_ID.pop(poll_id, None)

    target_chat_id, target_id, target_username, pending_nick = info

    yes_votes = 0
    no_votes = 0
    if closed_poll:
        for opt in closed_poll.options:
            if opt.text == "–î–∞":
                yes_votes = opt.voter_count
            elif opt.text == "–ù–µ—Ç":
                no_votes = opt.voter_count

    if yes_votes > no_votes:
        _ensure_chat_maps(target_chat_id)
        prev = NICKS[target_chat_id].get(target_id)
        if pending_nick != prev:
            _set_nick(chat_id=target_chat_id, user_id=target_id, nick=pending_nick)
        result = f"üéâ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ! {target_username} —Ç–µ–ø–µ—Ä—å ¬´{pending_nick}¬ª"
    else:
        result = f"‚ùå –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ. –ù–∏–∫ {target_username} –æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."

    await context.bot.send_message(chat_id=target_chat_id, text=result)

# ========= ENTRY =========
def main():
    app = Application.builder().token(API_TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(CommandHandler("nick", cmd_nick))
    app.add_handler(CommandHandler("pollclose", cmd_pollclose))

    # –∫–Ω–æ–ø–∫–∏
    app.add_handler(CallbackQueryHandler(on_button))

    # —Å–æ–±—ã—Ç–∏—è –æ–ø—Ä–æ—Å–æ–≤
    app.add_handler(PollHandler(on_poll))

    # –ó–∞–ø—É—Å–∫ –í–ï–ë–•–£–ö–ê–ú–ò ‚Äî –Ω–∏ –æ–¥–Ω–æ–≥–æ getUpdates –Ω–µ –±—É–¥–µ—Ç
    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=API_TOKEN,  # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å
        webhook_url=f"{PUBLIC_URL}/{API_TOKEN}",
        allowed_updates=["message", "callback_query", "poll", "poll_answer"],
        drop_pending_updates=True,
    )

if __name__ == "__main__":
    main()
